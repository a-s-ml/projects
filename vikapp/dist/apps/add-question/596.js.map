{"version":3,"file":"596.js","mappings":"qUAQO,MAAMA,E,OAAmBC,EAAUC,gBAAgB,CACxDC,UAAYC,IAAK,CACfC,cAAeD,EAAME,MAAsB,CACzCA,MAAQC,IAAK,CACXC,IAAM,YAAWD,QAIrBE,YAAaL,EAAME,MAA2B,CAC5CA,MAAOA,KAAA,CACLE,IAAM,eAIVE,gBAAiBN,EAAME,MAAyB,CAC9CA,MAAQK,IAAE,CACRH,IAAM,YAAWG,QAIrBC,kBAAmBR,EAAME,MAAgC,CACvDA,MAAQO,IAAI,CACVL,IAAM,iBAAgBK,MAExBC,aAAc,CAAC,mBAGjBC,kBAAmBX,EAAMY,SAA+C,CACtEV,MAAOA,EAAGO,OAAMI,eAAe,CAC7BT,IAAM,iBACNU,OAAQ,OACRC,KAAM,CAAEN,OAAMI,cAEhBG,gBAAiB,CAAC,gBAAiB,iCAGrCC,qBAAsBjB,EAAMY,SAA+C,CACzEV,MAAOA,EAAGO,OAAMI,eAAe,CAC7BT,IAAM,iBACNU,OAAQ,SACRC,KAAM,CAAEN,OAAMI,cAEhBG,gBAAiB,CAAC,gBAAiB,sCAK5B,sBACXE,EAAqB,oBACrBC,EAAmB,0BACnBC,EAAyB,6BACzBC,EAA4B,gCAC5BC,EAA+B,wBAC/BC,GAEA3B,C,uDC7DF,MAAM4B,GAAqBC,EAAAA,EAAAA,KACzBC,EAAAA,EAAAA,GAAe,CAAEC,QAAS,0CAC1B,CAAEC,WAAY,IAGH/B,GAAYgC,EAAAA,EAAAA,IAAU,CACjCC,YAAa,SACbC,gBAAgB,EAChBC,UAAWR,EACXS,SAAU,CACR,YACA,YACA,gBACA,WACA,8BACA,+BAEFlC,UAAWA,KAAA,CAAS,I","sources":["webpack://add-question/../../libs/api/src/category.api.ts","webpack://add-question/../../libs/api/src/global.api.ts"],"sourcesContent":["import { ICategory } from \"@models\";\r\nimport { ICategoryGroup } from \"@models\";\r\nimport {\r\n  IReqCategoryGroup,\r\n  IResCategoryGroup,\r\n} from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    countCategory: build.query<number, string>({\r\n      query: (count) => ({\r\n        url: `category/${count}`,\r\n      }),\r\n    }),\r\n\r\n    getCategory: build.query<ICategory[], string>({\r\n      query: () => ({\r\n        url: `category`,\r\n      }),\r\n    }),\r\n\r\n    getCategoryById: build.query<ICategory, number>({\r\n      query: (id) => ({\r\n        url: `category/${id}`,\r\n      }),\r\n    }),\r\n\r\n    getCategoryGroups: build.query<ICategoryGroup[], bigint>({\r\n      query: (chat) => ({\r\n        url: `chat-category/${chat}`,\r\n      }),\r\n      providesTags: [\"CategoryGroup\"],\r\n    }),\r\n\r\n    addCategoryGroups: build.mutation<IResCategoryGroup, IReqCategoryGroup>({\r\n      query: ({ chat, category }) => ({\r\n        url: `/chat-category`,\r\n        method: \"POST\",\r\n        body: { chat, category },\r\n      }),\r\n      invalidatesTags: [\"CategoryGroup\", \"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n    deleteCategoryGroups: build.mutation<IResCategoryGroup, IReqCategoryGroup>({\r\n      query: ({ chat, category }) => ({\r\n        url: `/chat-category`,\r\n        method: \"DELETE\",\r\n        body: { chat, category },\r\n      }),\r\n      invalidatesTags: [\"CategoryGroup\", \"CountAvailableQuestionGroup\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { \r\n  useCountCategoryQuery,\r\n  useGetCategoryQuery,\r\n  useGetCategoryGroupsQuery,\r\n  useAddCategoryGroupsMutation, \r\n  useDeleteCategoryGroupsMutation,\r\n  useGetCategoryByIdQuery\r\n} =\r\n  extendedApiSlice;\r\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n"],"names":["extendedApiSlice","globalApi","injectEndpoints","endpoints","build","countCategory","query","count","url","getCategory","getCategoryById","id","getCategoryGroups","chat","providesTags","addCategoryGroups","mutation","category","method","body","invalidatesTags","deleteCategoryGroups","useCountCategoryQuery","useGetCategoryQuery","useGetCategoryGroupsQuery","useAddCategoryGroupsMutation","useDeleteCategoryGroupsMutation","useGetCategoryByIdQuery","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","createApi","reducerPath","refetchOnFocus","baseQuery","tagTypes"],"sourceRoot":""}