{"version":3,"file":"308.js","mappings":"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","sources":["webpack://groups/../../libs/api/src/global.api.ts","webpack://groups/../../libs/api/src/group.api.ts","webpack://groups/./src/app/components/GroupAvatar.tsx","webpack://groups/./src/app/components/GroupsListItem.tsx","webpack://groups/./src/app/components/GroupsList.tsx","webpack://groups/./src/app/store/slices/groupApp.slice.ts","webpack://groups/./src/app/store/index.ts","webpack://groups/./src/app/components/GroupsPage.tsx","webpack://groups/./src/app/app.tsx","webpack://groups/./src/bootstrap.tsx","webpack://groups/../../libs/utils/src/func.ts","webpack://groups/../../node_modules/react-dom/client.js"],"sourcesContent":["import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","import { IChat } from \"@models\";\r\nimport { IGroup } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getGroups: build.query<IGroup[], number>({\r\n      query: (chat) => ({\r\n        url: `chat/findByReferal/${chat}`,\r\n      }),\r\n      providesTags: ['TypeGroup', 'TimeGroup', 'CategoryGroup']\r\n    }),\r\n    getInfoGroups: build.query<IChat, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat/groupInfoById/${chat}`,\r\n      }),\r\n    }),\r\n    getGroupDb: build.query<IGroup, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat/findByChatId/${chat}`,\r\n      }),\r\n      providesTags: ['TypeGroup', 'TimeGroup']\r\n    }),\r\n    getMemberCountGroups: build.query<number, number>({\r\n      query: (chat) => ({\r\n        url: `chat/groupMemberCountById/${chat}`,\r\n      }),\r\n    }),\r\n    getFilePhoto: build.query<string, string>({\r\n      query: (id) => ({\r\n        url: `chat/tgGetFilePhoto/${id}`,\r\n      }),\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetFilePhotoQuery,\r\n  useGetGroupsQuery,\r\n  useGetInfoGroupsQuery,\r\n  useGetMemberCountGroupsQuery,\r\n  useGetGroupDbQuery\r\n} = extendedApiSlice;\r\n","import { useGetFilePhotoQuery } from '@api/group';\r\n\r\ninterface GroupAvatarProps {\r\n  id: string;\r\n}\r\n\r\nexport default function GroupAvatar({ id }: GroupAvatarProps) {\r\n  const { data } = useGetFilePhotoQuery(id);\r\n\r\n  return (\r\n    <>\r\n      {data && (\r\n        <img\r\n          className=\"inline-block w-full rounded-full\"\r\n          src={`data:image/png;base64,${data}`}\r\n          alt={id}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useGetGroupDbQuery, useGetInfoGroupsQuery } from '@api/group';\r\nimport { deleteGroup, inDevelopment } from '@utils';\r\nimport GroupAvatar from './GroupAvatar';\r\nimport {\r\n  ButtonIcon,\r\n  ButtonIconConfirm,\r\n  SimpleAccordionIcon,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\n\r\ninterface GroupsListItemProps {\r\n  group: bigint;\r\n}\r\n\r\nexport default function GroupsListItem({ group }: GroupsListItemProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const { isError: errorGroupInfo, data: dataGroupInfo } =\r\n    useGetInfoGroupsQuery(group);\r\n  const { data: GroupDb } = useGetGroupDbQuery(group);\r\n\r\n  return (\r\n    <>\r\n      {errorGroupInfo && <li>error</li>}\r\n      {dataGroupInfo && GroupDb && (\r\n        <li className=\"cursor-pointer\">\r\n          <SimpleAccordionMain\r\n            description={\r\n              <>\r\n                <SimpleAccordionIcon size={10}>\r\n                  {dataGroupInfo.photo?.small_file_id && (\r\n                    <GroupAvatar id={dataGroupInfo.photo?.small_file_id} />\r\n                  )}\r\n                  {!dataGroupInfo.photo?.small_file_id && (\r\n                    <img\r\n                      className=\"inline-block w-full h-full rounded-full\"\r\n                      src=\"https://images.unsplash.com/photo-1545972154-9bb223aac798?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3050&q=80&exp=8&con=-15&sat=-75\"\r\n                      alt={dataGroupInfo.title}\r\n                    />\r\n                  )}\r\n                </SimpleAccordionIcon>\r\n                <SimpleAccordionText>\r\n                  <div className=\"text-sm font-medium text-[var(--tg-theme-text-color)]\">\r\n                    {dataGroupInfo.title}\r\n                  </div>\r\n                  {dataGroupInfo.username && (\r\n                    <p className=\"text-sm text-[var(--tg-theme-hint-color)]\">\r\n                      @{dataGroupInfo.username}\r\n                    </p>\r\n                  )}\r\n                </SimpleAccordionText>\r\n              </>\r\n            }\r\n            content={\r\n              <>\r\n                <ButtonIcon\r\n                  firstIcon={true}\r\n                  text={'Статистика'}\r\n                  color={'[var(--tg-theme-accent-text-color)]'}\r\n                  icon={'stat'}\r\n                  func={inDevelopment}\r\n                />\r\n                <ButtonIconConfirm\r\n                  firstIcon={true}\r\n                  text={'Удалить'}\r\n                  color={'red-500'}\r\n                  icon={'delete'}\r\n                  func={deleteGroup}\r\n                  textConfirm={`Вы действительно хотите удалить бота из группы ${\r\n                    dataGroupInfo?.username\r\n                      ? dataGroupInfo.username\r\n                      : dataGroupInfo?.title\r\n                  }`}\r\n                />\r\n              </>\r\n            }\r\n          />\r\n        </li>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useGetGroupsQuery } from '@api/group';\r\nimport { Preloader } from '@components';\r\nimport GroupsListItem from './GroupsListItem';\r\n\r\ninterface GroupsListProps {\r\n  chat: number;\r\n}\r\nexport default function GroupsList({ chat }: GroupsListProps) {\r\n  const { isLoading, data, isSuccess } = useGetGroupsQuery(chat);\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      <ul\r\n        role=\"list\"\r\n        className=\"divide-y divide-[var(--tg-theme-hint-color)] pt-9\"\r\n      >\r\n        {isSuccess &&\r\n          data.map((group) => (\r\n            <GroupsListItem key={group.id} group={group.chat} />\r\n          ))}\r\n      </ul>\r\n      <div className=\"pb-12 mb-8\"></div>\r\n    </>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootStateGroup } from '@store/groups';\r\n\r\nexport interface groupAppState {\r\n  groupSlide: boolean;\r\n  groupType: string;\r\n  groupId: number;\r\n}\r\n\r\nconst initialState: groupAppState = {\r\n  groupSlide: false,\r\n  groupType: '',\r\n  groupId: 10,\r\n};\r\n\r\nexport const groupAppSlice = createSlice({\r\n  name: 'groupApp',\r\n  initialState,\r\n  reducers: {\r\n    showGroupSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.groupSlide = action.payload;\r\n    },\r\n    typeGroup: (state, action: PayloadAction<string>) => {\r\n      state.groupType = action.payload;\r\n    },\r\n    dataGroup: (state, action: PayloadAction<number>) => {\r\n      state.groupId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { showGroupSlide, typeGroup, dataGroup } = groupAppSlice.actions;\r\n\r\nexport const selectGroupSlide = (state: RootStateGroup) => state.groupApp.groupSlide;\r\nexport const selectGroupData = (state: RootStateGroup) => state.groupApp.groupId;\r\nexport const selectGroupType = (state: RootStateGroup) => state.groupApp.groupType;\r\n\r\nexport default groupAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport groupAppSlice from './slices/groupApp.slice';\r\nimport { globalApi } from '@api/global';\r\n\r\nexport const storeGroups = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    groupApp: groupAppSlice,\r\n  },\r\n});\r\n\r\nexport type GroupDispatch = typeof storeGroups.dispatch;\r\nexport type RootStateGroup = ReturnType<typeof storeGroups.getState>;\r\n\r\nexport const useGroupDispatch = () => useDispatch<GroupDispatch>();\r\nexport const useGroupSelector: TypedUseSelectorHook<RootStateGroup> = useSelector;\r\n","import {\r\n  ButtonIcon,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n  SlidePage,\r\n} from '@components';\r\nimport GroupsList from './GroupsList';\r\nimport { storeGroups, useGroupDispatch, useGroupSelector } from '@store/groups';\r\nimport {\r\n  selectGroupSlide,\r\n  showGroupSlide,\r\n} from '../store/slices/groupApp.slice';\r\nimport { addGroup } from '@utils';\r\n\r\nexport function GroupsPage() {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useGroupDispatch();\r\n  const slide = useGroupSelector(selectGroupSlide);\r\n\r\n  if (slide) {\r\n    tg.BackButton.show();\r\n    tg.onEvent('backButtonClicked', () => {\r\n      dispatch(showGroupSlide(false));\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <GlobalHeader>\r\n        <ButtonIcon\r\n          firstIcon={true}\r\n          text={'Добавить группу'}\r\n          color={'[var(--tg-theme-accent-text-color)]'}\r\n          icon={'add'}\r\n          func={addGroup}\r\n        />\r\n      </GlobalHeader>\r\n      <Page>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <GroupsList chat={521884639} />\r\n        </MainBlock>\r\n      </Page>\r\n      <SlidePage slide={slide}>\r\n        <p>Groups</p>\r\n      </SlidePage>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GroupsPage;\r\n","import { Provider } from 'react-redux';\nimport GroupsPage from './components/GroupsPage';\nimport { storeGroups } from './store';\n\nexport const App = () => {\n  return (\n    <>\n      <Provider store={storeGroups}>\n        <GroupsPage />\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n","import * as ReactDOM from 'react-dom/client';\n\nimport App from './app/app';\nimport { StrictMode } from 'react';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <StrictMode>\n      <App />\n    </StrictMode>\n);\n","const tg = window.Telegram.WebApp;\r\n\r\ninterface IAnswers {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\ninterface IValidationLengthForm {\r\n  value: string | number | IAnswers[];\r\n  lengthMin: number;\r\n  lengthMax: number;\r\n}\r\n\r\nexport const addGroup = () => {\r\n  tg.openTelegramLink('https://t.me/ViktorinaOnlineBot?startgroup=add');\r\n};\r\n\r\nexport const inDevelopment = () => {\r\n  tg.showAlert(\r\n    'Данная функция находится в разработке',\r\n    console.log('inDevelopment')\r\n  );\r\n};\r\n\r\nexport const deleteGroup = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const deleteQuestion = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const validationLengthForm = (data: IValidationLengthForm): boolean => {\r\n  if (typeof data.value === 'string') {\r\n    console.log('string');\r\n    if (\r\n      data.value.length < data.lengthMin ||\r\n      data.value.length > data.lengthMax\r\n    ) {\r\n      console.log('string length = ', data.value.length);\r\n      console.log('false');\r\n      return false;\r\n    } else {\r\n      console.log('string length = ', data.value.length);\r\n      console.log('number = ', data.value);\r\n      console.log('true');\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'number') {\r\n    console.log('number');\r\n    if (data.value === 0) {\r\n      console.log('number = ', data.value);\r\n      console.log('false');\r\n      return false;\r\n    } else {\r\n      console.log('number = ', data.value);\r\n      console.log('true');\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'object') {\r\n    console.log('object');\r\n    data.value.map((item) => {\r\n      if (\r\n        item.value.length < data.lengthMin ||\r\n        item.value.length > data.lengthMax\r\n      ) {\r\n        console.log('object length = ', item.value.length);\r\n        console.log('false');\r\n        return false;\r\n      } else {\r\n        console.log('object length = ', item.value.length);\r\n        console.log('true');\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n  return false;\r\n};\r\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","globalApi","createApi","reducerPath","refetchOnFocus","baseQuery","tagTypes","endpoints","extendedApiSlice","injectEndpoints","build","getGroups","query","chat","url","providesTags","getInfoGroups","getGroupDb","getMemberCountGroups","getFilePhoto","id","useGetFilePhotoQuery","useGetGroupsQuery","useGetInfoGroupsQuery","useGetMemberCountGroupsQuery","useGetGroupDbQuery","GroupAvatar","data","_jsx","_Fragment","children","className","src","alt","GroupsListItem","group","_dataGroupInfo$photo","_dataGroupInfo$photo2","_dataGroupInfo$photo3","window","Telegram","WebApp","isError","errorGroupInfo","dataGroupInfo","GroupDb","_jsxs","SimpleAccordionMain","description","SimpleAccordionIcon","size","photo","small_file_id","title","SimpleAccordionText","username","content","ButtonIcon","firstIcon","text","color","icon","func","inDevelopment","ButtonIconConfirm","deleteGroup","textConfirm","GroupsList","isLoading","isSuccess","Preloader","role","map","groupAppSlice","createSlice","name","initialState","groupSlide","groupType","groupId","reducers","showGroupSlide","state","action","payload","typeGroup","dataGroup","actions","selectGroupSlide","groupApp","storeGroups","configureStore","reducer","useGroupSelector","useSelector","tg","dispatch","useDispatch","slide","BackButton","show","onEvent","GlobalHeader","addGroup","Page","MainBlock","SlidePage","App","Provider","store","GroupsPage","ReactDOM","document","getElementById","render","StrictMode","openTelegramLink","showAlert","console","log","b","validationLengthForm","value","length","lengthMin","lengthMax","item","m","exports","createRoot","hydrateRoot"],"sourceRoot":""}