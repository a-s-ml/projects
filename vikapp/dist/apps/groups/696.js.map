{"version":3,"file":"696.js","mappings":"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","sources":["webpack://groups/../../libs/api/src/global.api.ts","webpack://groups/../../libs/api/src/group.api.ts","webpack://groups/./src/app/components/GroupAvatar.tsx","webpack://groups/./src/app/components/GroupsListItem.tsx","webpack://groups/./src/app/components/GroupsList.tsx","webpack://groups/./src/app/components/GroupsPage.tsx","webpack://groups/./src/app/store/slices/groupApp.slice.ts","webpack://groups/./src/app/store/index.ts","webpack://groups/./src/app/app.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","import { IChat } from \"@models\";\r\nimport { IGroup } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getGroups: build.query<IGroup[], number>({\r\n      query: (chat) => ({\r\n        url: `chat/findByReferal/${chat}`,\r\n      }),\r\n      providesTags: ['TypeGroup', 'TimeGroup', 'CategoryGroup']\r\n    }),\r\n    getInfoGroups: build.query<IChat, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat/groupInfoById/${chat}`,\r\n      }),\r\n    }),\r\n    getGroupDb: build.query<IGroup, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat/findByChatId/${chat}`,\r\n      }),\r\n      providesTags: ['TypeGroup', 'TimeGroup']\r\n    }),\r\n    getMemberCountGroups: build.query<number, number>({\r\n      query: (chat) => ({\r\n        url: `chat/groupMemberCountById/${chat}`,\r\n      }),\r\n    }),\r\n    getFilePhoto: build.query<string, string>({\r\n      query: (id) => ({\r\n        url: `chat/tgGetFilePhoto/${id}`,\r\n      }),\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetFilePhotoQuery,\r\n  useGetGroupsQuery,\r\n  useGetInfoGroupsQuery,\r\n  useGetMemberCountGroupsQuery,\r\n  useGetGroupDbQuery\r\n} = extendedApiSlice;\r\n","import { useGetFilePhotoQuery } from '@api/group';\r\n\r\ninterface GroupAvatarProps {\r\n  id: string;\r\n}\r\n\r\nexport default function GroupAvatar({ id }: GroupAvatarProps) {\r\n  const { isLoading: loadPhoto, data: dataPhoto } = useGetFilePhotoQuery(id);\r\n\r\n  return (\r\n    <>\r\n      {loadPhoto && <p>...</p>}\r\n      {dataPhoto && (\r\n        <img\r\n          className=\"inline-block w-full rounded-full\"\r\n          src={`data:image/png;base64,${dataPhoto}`}\r\n          alt={id}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useGetGroupDbQuery, useGetInfoGroupsQuery } from '@api/group';\r\nimport GroupAvatar from './GroupAvatar';\r\nimport {\r\n  DeleteButton,\r\n  SimpleAccordionIcon,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\n\r\ninterface GroupsListItemProps {\r\n  group: bigint;\r\n}\r\n\r\nexport default function GroupsListItem({ group }: GroupsListItemProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const { isError: errorGroupInfo, data: dataGroupInfo } =\r\n    useGetInfoGroupsQuery(group);\r\n  const { data: GroupDb } = useGetGroupDbQuery(group);\r\n\r\n  function deleteGroup(b: boolean) {\r\n    if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n    return;\r\n  }\r\n  const deleteGroupText: string = `Вы действительно хотите удалить бота из группы ${\r\n    dataGroupInfo?.username ? dataGroupInfo.username : dataGroupInfo?.title\r\n  }`;\r\n\r\n  return (\r\n    <>\r\n      {errorGroupInfo && <li>error</li>}\r\n      {dataGroupInfo && GroupDb && (\r\n        <li className=\"cursor-pointer\">\r\n          <SimpleAccordionMain\r\n            description={\r\n              <>\r\n                <SimpleAccordionIcon size={10}>\r\n                  {dataGroupInfo.photo?.small_file_id && (\r\n                    <GroupAvatar id={dataGroupInfo.photo?.small_file_id} />\r\n                  )}\r\n                  {!dataGroupInfo.photo?.small_file_id && (\r\n                    <img\r\n                      className=\"inline-block w-full rounded-full\"\r\n                      src=\"https://images.unsplash.com/photo-1545972154-9bb223aac798?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3050&q=80&exp=8&con=-15&sat=-75\"\r\n                      alt={dataGroupInfo.title}\r\n                    />\r\n                  )}\r\n                </SimpleAccordionIcon>\r\n                <SimpleAccordionText>\r\n                  <div className=\"text-sm font-medium text-[var(--tg-theme-text-color)]\">\r\n                    {dataGroupInfo.title}\r\n                  </div>\r\n                  {dataGroupInfo.username && (\r\n                    <p className=\"text-sm text-[var(--tg-theme-hint-color)]\">\r\n                      @{dataGroupInfo.username}\r\n                    </p>\r\n                  )}\r\n                </SimpleAccordionText>\r\n              </>\r\n            }\r\n            content={\r\n              <>\r\n                <DeleteButton func={deleteGroup} text={deleteGroupText} />\r\n                <p>Модерировать</p>\r\n                <p>Статистика</p>\r\n              </>\r\n            }\r\n          />\r\n        </li>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useGetGroupsQuery } from '@api/group';\r\nimport { Preloader } from '@components';\r\nimport GroupsListItem from './GroupsListItem';\r\n\r\ninterface GroupsListProps {\r\n  chat: number;\r\n}\r\nexport default function GroupsList({ chat }: GroupsListProps) {\r\n  const { isLoading, data, isSuccess } = useGetGroupsQuery(chat);\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      <ul\r\n        role=\"list\"\r\n        className=\"mt-4 divide-y divide-[var(--tg-theme-hint-color)] pt-9\"\r\n      >\r\n        {isSuccess &&\r\n          data.map((group) => (\r\n            <GroupsListItem key={group.id} group={group.chat} />\r\n          ))}\r\n      </ul>\r\n      <div className=\"pb-12 mb-8\"></div>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  AddGroup,\r\n  Feedback,\r\n  GlobalFooter,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n} from '@components';\r\nimport GroupsList from './GroupsList';\r\n\r\nexport function GroupsPage() {\r\n  const tg = window.Telegram.WebApp;\r\n  return (\r\n    <>\r\n      <GlobalHeader>\r\n        <AddGroup />\r\n      </GlobalHeader>\r\n      <Page>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <GroupsList chat={521884639} />\r\n        </MainBlock>\r\n      </Page>\r\n      <GlobalFooter>\r\n        <Feedback />\r\n      </GlobalFooter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GroupsPage;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootStateGroup } from '@store/groups';\r\n\r\nexport interface groupAppState {\r\n  groupSlide: boolean;\r\n  groupType: string;\r\n  groupId: number;\r\n}\r\n\r\nconst initialState: groupAppState = {\r\n  groupSlide: false,\r\n  groupType: '',\r\n  groupId: 10,\r\n};\r\n\r\nexport const groupAppSlice = createSlice({\r\n  name: 'groupApp',\r\n  initialState,\r\n  reducers: {\r\n    showGroupSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.groupSlide = action.payload;\r\n    },\r\n    typeGroup: (state, action: PayloadAction<string>) => {\r\n      state.groupType = action.payload;\r\n    },\r\n    dataGroup: (state, action: PayloadAction<number>) => {\r\n      state.groupId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { showGroupSlide, typeGroup, dataGroup } = groupAppSlice.actions;\r\n\r\nexport const selectGroupSlide = (state: RootStateGroup) => state.groupApp.groupSlide;\r\nexport const selectGroupData = (state: RootStateGroup) => state.groupApp.groupId;\r\nexport const selectGroupType = (state: RootStateGroup) => state.groupApp.groupType;\r\n\r\nexport default groupAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport groupAppSlice from './slices/groupApp.slice';\r\nimport { globalApi } from '@api/global';\r\n\r\nexport const storeGroups = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    groupApp: groupAppSlice,\r\n  },\r\n});\r\n\r\nexport type GroupDispatch = typeof storeGroups.dispatch;\r\nexport type RootStateGroup = ReturnType<typeof storeGroups.getState>;\r\n\r\nexport const useGroupDispatch = () => useDispatch<GroupDispatch>();\r\nexport const useGroupSelector: TypedUseSelectorHook<RootStateGroup> = useSelector;\r\n","import { Provider } from 'react-redux';\nimport GroupsPage from './components/GroupsPage';\nimport { storeGroups } from './store';\n\nexport const App = () => {\n  return (\n    <Provider store={storeGroups}>\n      <GroupsPage />\n    </Provider>\n  );\n};\n\nexport default App;\n"],"names":["staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","globalApi","createApi","reducerPath","refetchOnFocus","baseQuery","tagTypes","endpoints","extendedApiSlice","injectEndpoints","build","getGroups","query","chat","url","providesTags","getInfoGroups","getGroupDb","getMemberCountGroups","getFilePhoto","id","useGetFilePhotoQuery","useGetGroupsQuery","useGetInfoGroupsQuery","useGetMemberCountGroupsQuery","useGetGroupDbQuery","GroupAvatar","isLoading","loadPhoto","data","dataPhoto","_jsxs","_Fragment","children","_jsx","className","src","alt","GroupsListItem","group","_dataGroupInfo$photo","_dataGroupInfo$photo2","_dataGroupInfo$photo3","tg","window","Telegram","WebApp","isError","errorGroupInfo","dataGroupInfo","GroupDb","deleteGroupText","username","title","SimpleAccordionMain","description","SimpleAccordionIcon","size","photo","small_file_id","SimpleAccordionText","content","DeleteButton","func","b","openTelegramLink","text","GroupsList","isSuccess","Preloader","role","map","GlobalHeader","AddGroup","Page","MainBlock","GlobalFooter","Feedback","groupAppSlice","createSlice","name","initialState","groupSlide","groupType","groupId","reducers","showGroupSlide","state","action","payload","typeGroup","dataGroup","actions","storeGroups","configureStore","reducer","groupApp","App","Provider","store","GroupsPage"],"sourceRoot":""}