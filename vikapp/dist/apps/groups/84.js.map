{"version":3,"file":"84.js","mappings":"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","sources":["webpack://groups/../../libs/api/src/global.api.ts","webpack://groups/../../libs/api/src/group.api.ts","webpack://groups/../../libs/api/src/activeGroup.api.ts","webpack://groups/./src/app/components/GroupAvatar.tsx","webpack://groups/./src/app/components/GroupsListItem.tsx","webpack://groups/./src/app/components/GroupsList.tsx","webpack://groups/./src/app/store/slices/groupApp.slice.ts","webpack://groups/./src/app/store/index.ts","webpack://groups/./src/app/components/GroupsPage.tsx","webpack://groups/./src/app/app.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","import { IChat } from \"@models\";\r\nimport { IGroup } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getGroups: build.query<IGroup[], number>({\r\n      query: (chat) => ({\r\n        url: `chat/findByReferal/${chat}`,\r\n      }),\r\n      providesTags: ['TypeGroup', 'TimeGroup', 'CategoryGroup']\r\n    }),\r\n    getInfoGroups: build.query<IChat, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat/groupInfoById/${chat}`,\r\n      }),\r\n    }),\r\n    getGroupDb: build.query<IGroup, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat/findByChatId/${chat}`,\r\n      }),\r\n      providesTags: ['TypeGroup', 'TimeGroup']\r\n    }),\r\n    getMemberCountGroups: build.query<number, number>({\r\n      query: (chat) => ({\r\n        url: `chat/groupMemberCountById/${chat}`,\r\n      }),\r\n    }),\r\n    getFilePhoto: build.query<string, string>({\r\n      query: (id) => ({\r\n        url: `chat/tgGetFilePhoto/${id}`,\r\n      }),\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetFilePhotoQuery,\r\n  useGetGroupsQuery,\r\n  useGetInfoGroupsQuery,\r\n  useGetMemberCountGroupsQuery,\r\n  useGetGroupDbQuery\r\n} = extendedApiSlice;\r\n","import { IActiveChat } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getActiveGroups: build.query<boolean, bigint>({\r\n      query: (chat) => ({\r\n        url: `chat-active/${chat}`,\r\n      }),\r\n    }),\r\n\r\n    setActiveGroups: build.mutation<IActiveChat, bigint>({\r\n      query: (chat) => ({\r\n        url: `/chat-active`,\r\n        method: \"POST\",\r\n        body: { chat },\r\n      }),\r\n    }),\r\n\r\n    deleteActiveGroups: build.mutation<IActiveChat, bigint>({\r\n      query: (chat) => ({\r\n        url: `/chat-active/${chat}`,\r\n        method: \"DELETE\",\r\n        body: { chat },\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n    useGetActiveGroupsQuery,\r\n    useSetActiveGroupsMutation,\r\n    useDeleteActiveGroupsMutation\r\n} = extendedApiSlice;\r\n","import { useGetFilePhotoQuery } from '@api/group';\r\n\r\ninterface GroupAvatarProps {\r\n  id: string;\r\n}\r\n\r\nexport default function GroupAvatar({ id }: GroupAvatarProps) {\r\n  const { isLoading: loadPhoto, data: dataPhoto } = useGetFilePhotoQuery(id);\r\n\r\n  return (\r\n    <>\r\n      {loadPhoto && <p>...</p>}\r\n      {dataPhoto && (\r\n        <img\r\n          className=\"inline-block h-10 w-14 rounded-full\"\r\n          src={`data:image/png;base64,${dataPhoto}`}\r\n          alt={id}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useGetGroupDbQuery, useGetInfoGroupsQuery } from '@api/group';\r\nimport { useGetActiveGroupsQuery } from '@api/group/active';\r\nimport { Cog8ToothIcon } from '@heroicons/react/24/outline';\r\nimport GroupAvatar from './GroupAvatar';\r\n\r\ninterface GroupsListItemProps {\r\n  group: bigint;\r\n}\r\n\r\nexport default function GroupsListItem({ group }: GroupsListItemProps) {\r\n  const { data: groupActive, isSuccess: successActive } =\r\n    useGetActiveGroupsQuery(group);\r\n  const { isError: errorGroupInfo, data: dataGroupInfo } =\r\n    useGetInfoGroupsQuery(group);\r\n  const { data: GroupDb } = useGetGroupDbQuery(group);\r\n\r\n  return (\r\n    <>\r\n      {errorGroupInfo && <li>error</li>}\r\n      {dataGroupInfo && GroupDb && (\r\n        <li className=\"py-4 px-0\">\r\n          <div className=\"group relative flex items-start space-x-3\">\r\n            <div className=\"flex-shrink-0\">\r\n              <span className=\"inline-flex h-10 w-10 items-center justify-center rounded-lg\">\r\n                {dataGroupInfo.photo?.small_file_id && (\r\n                  <GroupAvatar id={dataGroupInfo.photo?.small_file_id} />\r\n                )}\r\n                {!dataGroupInfo.photo?.small_file_id && (\r\n                  <img\r\n                    className=\"inline-block h-10 w-14 rounded-full\"\r\n                    src=\"https://images.unsplash.com/photo-1545972154-9bb223aac798?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3050&q=80&exp=8&con=-15&sat=-75\"\r\n                    alt={dataGroupInfo.title}\r\n                  />\r\n                )}\r\n              </span>\r\n            </div>\r\n            <div className=\"min-w-0 flex-1\">\r\n              <div className=\"text-sm font-medium text-[var(--tg-theme-text-color)]\">\r\n                {dataGroupInfo.title}\r\n              </div>\r\n              {dataGroupInfo.username && (\r\n                <p className=\"text-sm text-[var(--tg-theme-hint-color)]\">\r\n                  @{dataGroupInfo.username}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"group relative flex items-start space-x-3 cursor-pointer\"\r\n            onClick={() => {\r\n              console.log('asd');\r\n            }}\r\n          >\r\n            <div className=\"flex-shrink-0 self-center\">\r\n              <Cog8ToothIcon\r\n                className=\"h-5 w-5 text-[var(--tg-theme-accent-text-color)] group-hover:text-[var(--tg-theme-text-color)]\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </li>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useGetGroupsQuery } from '@api/group';\r\nimport { Preloader } from '@components';\r\nimport GroupsListItem from './GroupsListItem';\r\n\r\ninterface GroupsListProps {\r\n  chat: number;\r\n}\r\nexport default function GroupsList({ chat }: GroupsListProps) {\r\n  console.log(chat);\r\n  const { isLoading, data, isSuccess } = useGetGroupsQuery(chat);\r\n  isSuccess && console.log(data);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      <ul\r\n        role=\"list\"\r\n        className=\"mt-4 divide-y divide-[var(--tg-theme-hint-color)] pt-9\"\r\n      >\r\n        {isSuccess &&\r\n          data.map((group) => (\r\n            <GroupsListItem key={group.id} group={group.chat} />\r\n          ))}\r\n      </ul>\r\n      <div className=\"pb-12 mb-8\"></div>\r\n    </>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootStateGroup } from '@store/groups';\r\n\r\nexport interface groupAppState {\r\n  groupSlide: boolean;\r\n  groupType: string;\r\n  groupId: number;\r\n}\r\n\r\nconst initialState: groupAppState = {\r\n  groupSlide: false,\r\n  groupType: '',\r\n  groupId: 10,\r\n};\r\n\r\nexport const groupAppSlice = createSlice({\r\n  name: 'groupApp',\r\n  initialState,\r\n  reducers: {\r\n    showGroupSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.groupSlide = action.payload;\r\n    },\r\n    typeGroup: (state, action: PayloadAction<string>) => {\r\n      state.groupType = action.payload;\r\n    },\r\n    dataGroup: (state, action: PayloadAction<number>) => {\r\n      state.groupId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { showGroupSlide, typeGroup, dataGroup } = groupAppSlice.actions;\r\n\r\nexport const selectGroupSlide = (state: RootStateGroup) => state.groupApp.groupSlide;\r\nexport const selectGroupData = (state: RootStateGroup) => state.groupApp.groupId;\r\nexport const selectGroupType = (state: RootStateGroup) => state.groupApp.groupType;\r\n\r\nexport default groupAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport groupAppSlice from './slices/groupApp.slice';\r\nimport { globalApi } from '@api/global';\r\n\r\nexport const storeGroups = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    groupApp: groupAppSlice,\r\n  },\r\n});\r\n\r\nexport type GroupDispatch = typeof storeGroups.dispatch;\r\nexport type RootStateGroup = ReturnType<typeof storeGroups.getState>;\r\n\r\nexport const useGroupDispatch = () => useDispatch<GroupDispatch>();\r\nexport const useGroupSelector: TypedUseSelectorHook<RootStateGroup> = useSelector;\r\n","import {\r\n  AddGroup,\r\n  Feedback,\r\n  GlobalFooter,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n} from '@components';\r\nimport GroupsList from './GroupsList';\r\nimport { storeGroups, useGroupDispatch, useGroupSelector } from '@store/groups';\r\nimport {\r\n  selectGroupSlide,\r\n  selectGroupType,\r\n} from '../store/slices/groupApp.slice';\r\n\r\nexport function GroupsPage() {\r\n  const tg = window.Telegram.WebApp;\r\n  console.log(useGroupSelector(storeGroups.getState));\r\n\r\n  const slide = useGroupSelector(selectGroupSlide);\r\n  const type = useGroupSelector(selectGroupType);\r\n  console.log('slide', slide);\r\n  console.log('type', type);\r\n  return (\r\n    <>\r\n      <GlobalHeader>\r\n        <AddGroup />\r\n      </GlobalHeader>\r\n      <Page>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\">\r\n            <h2 className=\"mt-2 text-base font-semibold leading-6 text-[var(--tg-theme-accent-text-color)]\">\r\n              Groups\r\n            </h2>\r\n          </div>\r\n          <GroupsList chat={521884639} />\r\n        </MainBlock>\r\n      </Page>\r\n      <GlobalFooter>\r\n        <Feedback />\r\n      </GlobalFooter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GroupsPage;\r\n","import { Provider } from 'react-redux';\nimport GroupsPage from './components/GroupsPage';\nimport { storeGroups } from './store';\n\nexport const App = () => {\n  return (\n    <Provider store={storeGroups}>\n      <GroupsPage />\n    </Provider>\n  );\n};\n\nexport default App;\n"],"names":["staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","globalApi","createApi","reducerPath","refetchOnFocus","baseQuery","tagTypes","endpoints","extendedApiSlice","injectEndpoints","build","getGroups","query","chat","url","providesTags","getInfoGroups","getGroupDb","getMemberCountGroups","getFilePhoto","id","useGetFilePhotoQuery","useGetGroupsQuery","useGetInfoGroupsQuery","useGetMemberCountGroupsQuery","useGetGroupDbQuery","getActiveGroups","setActiveGroups","mutation","method","body","deleteActiveGroups","useGetActiveGroupsQuery","useSetActiveGroupsMutation","useDeleteActiveGroupsMutation","GroupAvatar","isLoading","loadPhoto","data","dataPhoto","_jsxs","_Fragment","children","_jsx","className","src","alt","GroupsListItem","group","_dataGroupInfo$photo","_dataGroupInfo$photo2","_dataGroupInfo$photo3","groupActive","isSuccess","successActive","isError","errorGroupInfo","dataGroupInfo","GroupDb","photo","small_file_id","title","username","onClick","console","log","Cog8ToothIcon","GroupsList","Preloader","role","map","groupAppSlice","createSlice","name","initialState","groupSlide","groupType","groupId","reducers","showGroupSlide","state","action","payload","typeGroup","dataGroup","actions","selectGroupSlide","groupApp","selectGroupType","storeGroups","configureStore","reducer","useGroupSelector","useSelector","window","Telegram","WebApp","getState","slide","type","GlobalHeader","AddGroup","Page","MainBlock","GlobalFooter","Feedback","App","Provider","store","GroupsPage"],"sourceRoot":""}