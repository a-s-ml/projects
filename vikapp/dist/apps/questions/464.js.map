{"version":3,"file":"464.js","mappings":"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","sources":["webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/../../libs/api/src/question.api.ts","webpack://questions/./src/app/components/QuestionListItem.tsx","webpack://questions/./src/app/components/QuestionList.tsx","webpack://questions/./src/app/components/NewQuestion/TextList.tsx","webpack://questions/./src/app/components/NewQuestion/StepsForm.tsx","webpack://questions/./src/app/components/NewQuestion/CategoryList.tsx","webpack://questions/./src/app/components/NewQuestion/AnswersList.tsx","webpack://questions/./src/app/components/NewQuesion.tsx","webpack://questions/./src/app/components/QuestionsPage.tsx","webpack://questions/./src/app/app.tsx","webpack://questions/../../libs/api/src/global.api.ts","webpack://questions/../../libs/utils/src/func.ts","webpack://questions/../../libs/utils/src/stepsForm.ts","webpack://questions/../../libs/utils/src/mainButton.ts","webpack://questions/../../libs/utils/src/backButton.ts","webpack://questions/../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://questions/../../node_modules/react/jsx-runtime.js"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '@store/questions';\r\n\r\nexport interface IAnswers {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport interface IAddQuestionFront {\r\n  text: string;\r\n  category: number;\r\n  answers: IAnswers[];\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestionFront;\r\n}\r\n\r\nexport const initialAnswers = [\r\n  { id: 1, name: 'answer1', value: '' },\r\n  { id: 2, name: 'answer2', value: '' },\r\n  { id: 3, name: 'answer3', value: '' },\r\n  { id: 4, name: 'answer4', value: '' },\r\n];\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answers: initialAnswers,\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswers: (state, action: PayloadAction<IAnswers[]>) => {\r\n      state.addQuestion.answers = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answers = initialAnswers;\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n  getQuestionAnswers,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from '@slice/questions'; \r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import { IQuestion } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport interface IAddQuestionBack {\r\n  chat: bigint;\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number; \r\n}\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getQuestionById: build.query<IQuestion, number>({\r\n      query: (id) => ({\r\n        url: `question/findById/${id}`,\r\n      }),\r\n    }),\r\n\r\n    getQuestionByChat: build.query<IQuestion[], number>({\r\n      query: (chat) => ({\r\n        url: `question/findByChatId/${chat}`,\r\n      }),\r\n    }),\r\n\r\n    updateQuestion: build.mutation<IQuestion, any>({\r\n      query: ({ id, question }) => ({\r\n        url: `/question/${id}`,\r\n        method: \"PATCH\",\r\n        body: { question },\r\n      }),\r\n    }),\r\n\r\n    addQuestion: build.mutation<IQuestion, IAddQuestionBack>({\r\n      query: (question) => ({ \r\n        url: `/question`,\r\n        method: \"POST\",\r\n        body: question,\r\n      }),\r\n    }),\r\n\r\n    deleteQuestion: build.mutation<number, number>({\r\n      query: (id) => ({\r\n        url: `/chat-category`,\r\n        method: \"DELETE\",\r\n        body: { id },\r\n      }),\r\n    }),\r\n\r\n    countAvailableQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countAvailableQuestionByChatId/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n    countPublishedQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countPublishedQuestion/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetQuestionByChatQuery,\r\n  useGetQuestionByIdQuery,\r\n  useAddQuestionMutation,\r\n  useDeleteQuestionMutation,\r\n  useUpdateQuestionMutation,\r\n  useCountAvailableQuestionQuery,\r\n  useCountPublishedQuestionQuery\r\n} = extendedApiSlice;\r\n","import {\r\n  ButtonIcon,\r\n  ButtonIconConfirm,\r\n  Preloader,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\nimport { useGetQuestionByChatQuery } from '@api/question';\r\nimport { deleteQuestion, inDevelopment } from '@utils';\r\n\r\ninterface QuestionListItemProps {\r\n  chat: number;\r\n}\r\n\r\nexport const QuestionListItem = ({ chat }: QuestionListItemProps) => {\r\n  const { isLoading, data, isSuccess } = useGetQuestionByChatQuery(chat);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      {isSuccess &&\r\n        data.map((item) => (\r\n          <li className=\"cursor-pointer\">\r\n            <SimpleAccordionMain\r\n              description={\r\n                <SimpleAccordionText>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Дата: {String(item.dateadd)}\r\n                  </span>\r\n                  <p className=\"line-clamp-3\">{item.text}</p>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Категория: {item.category}\r\n                  </span>\r\n                </SimpleAccordionText>\r\n              }\r\n              content={\r\n                <>\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Модерировать'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'moderate'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Статистика'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'stat'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Отправить'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'send'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIconConfirm\r\n                    firstIcon={true}\r\n                    text={'Удалить'}\r\n                    color={'red-500'}\r\n                    icon={'delete'}\r\n                    func={deleteQuestion}\r\n                    textConfirm={`Вы действительно хотите удалить вопрос №${\r\n                      isSuccess ? data[0].id : 'не success'\r\n                    }`}\r\n                  />\r\n                </>\r\n              }\r\n            />\r\n          </li>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n","import { QuestionListItem } from './QuestionListItem';\r\n\r\nexport const QuestionList = () => {\r\n  return (\r\n    <ul\r\n      role=\"list\"\r\n      className=\"divide-y divide-[var(--tg-theme-hint-color)]\"\r\n    >\r\n      <QuestionListItem chat={521884639} />\r\n    </ul>\r\n  );\r\n};\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  getQuestionDefault,\r\n  getQuestionText,\r\n  selectQuestionText,\r\n} from '@slice/questions';\r\nimport { SimpleTextArea, ValidateForm } from '@components';\r\n\r\ninterface TextListProps {\r\n  validate: (b: boolean) => void;\r\n}\r\n\r\nexport function TextList({ validate }: TextListProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const questionText = useQuestionSelector(selectQuestionText);\r\n  const dispatch = useQuestionDispatch();\r\n  const [text, setText] = useState('');\r\n  const [textLength, setTextLength] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const confirm = (b: boolean) => {\r\n      if (b) return handleText(questionText);\r\n      return dispatch(getQuestionDefault());\r\n    };\r\n    setTimeout(() => {\r\n      if (questionText != '') {\r\n        tg.showConfirm(`Применить несохранённый черновик?`, confirm);\r\n      }\r\n    }, 1500);\r\n  }, []);\r\n\r\n  textLength ? validate(true) : validate(false);\r\n\r\n  const handleText = (txt: string) => {\r\n    setText(txt);\r\n    dispatch(getQuestionText(txt));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        <SimpleTextArea\r\n          label={'Текст вопроса:'}\r\n          rows={5}\r\n          value={text}\r\n          func={(e) => handleText(e.target.value)}\r\n        />\r\n        <div className=\"py-4\">\r\n          <ValidateForm\r\n            text={\r\n              'Длина текста вопроса должна быть не менее 10 не более 250 символов'\r\n            }\r\n            data={{ value: text, lengthMin: 10, lengthMax: 250 }}\r\n            validation={setTextLength}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","interface StepsFormProps {\r\n  step: number;\r\n  stepsCount: number;\r\n}\r\n\r\ninterface Steps {\r\n  id: number;\r\n  status: string;\r\n}\r\n\r\nexport default function StepsForm({ step, stepsCount }: StepsFormProps) {\r\n  let steps: Steps[] = [];\r\n\r\n  //хз\r\n  for (let i = 0; i < stepsCount; i++) {\r\n    steps.push({\r\n      id: i,\r\n      status: step > i ? \"complete\" : \"upcoming\",\r\n    });\r\n  }\r\n  //хз\r\n\r\n  return (\r\n    <nav className=\"flex items-center px-8 pt-8 pb-4 bg-[var(--tg-theme-bg-color)] space-x-3 justify-center\" aria-label=\"Progress\">\r\n      <p className=\"text-sm font-medium text-[var(--tg-theme-accent-text-color)]\">\r\n        Шаг {step} из {stepsCount}\r\n      </p>\r\n      <ol role=\"list\" className=\"ml-8 flex items-center space-x-5\">\r\n        {steps.map((step) => (\r\n          <li key={step.id}>\r\n            {step.status === \"complete\" ? (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"></span>\r\n            ) : step.status === \"current\" ? (\r\n              <span\r\n                className=\"relative flex items-center justify-center\"\r\n                aria-current=\"step\"\r\n              >\r\n                <span className=\"absolute flex h-5 w-5 p-px\" aria-hidden=\"true\">\r\n                  <span className=\"h-full w-full rounded-full bg-[var(--tg-theme-text-color)]\" />\r\n                </span>\r\n                <span\r\n                  className=\"relative block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            ) : (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-text-color)]\"></span>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { getQuestionCategory, selectQuestionCategory } from '@slice/questions';\r\nimport { useState } from 'react';\r\nimport { ICategory } from '@models';\r\nimport { useGetCategoryQuery } from '@api/category';\r\nimport { SimpleCategorySelect, ValidateForm } from '@components';\r\n\r\ninterface CategoryListProps {\r\n  validate: (b: boolean) => void;\r\n}\r\n\r\nexport function CategoryList({ validate }: CategoryListProps) {\r\n  const questionCategory = useQuestionSelector(selectQuestionCategory);\r\n  console.log('questionCategory', questionCategory);\r\n  const { data } = useGetCategoryQuery('');\r\n  console.log('data', data);\r\n  const dispatch = useQuestionDispatch();\r\n  const [selectedCategory, setCategory] = useState(\r\n    data && questionCategory != 0\r\n      ? data.find((id) => id.id === questionCategory)\r\n      : { id: 0, name: '' }\r\n  );\r\n  console.log('selectedCategory', selectedCategory);\r\n\r\n  const handleChange = (cat: ICategory) => {\r\n    setCategory(cat);\r\n    dispatch(getQuestionCategory(cat.id));\r\n  };\r\n\r\n  const [validCategory, setValidCategory] = useState(false);\r\n\r\n  validCategory ? validate(true) : validate(false);\r\n\r\n  return (\r\n    <div className=\"py-2\">\r\n      {data && (\r\n        <SimpleCategorySelect\r\n          value={selectedCategory ? selectedCategory : { id: 0, name: ' ' }}\r\n          func={handleChange}\r\n          data={data}\r\n        />\r\n      )}\r\n      <div className=\"py-4\">\r\n        <ValidateForm\r\n          text={'Выберите подходящую категорию'}\r\n          data={{\r\n            value: selectedCategory ? selectedCategory.id : 0,\r\n            lengthMin: 0,\r\n            lengthMax: 0,\r\n          }}\r\n          validation={setValidCategory}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useState } from 'react';\r\nimport { getQuestionAnswerright, getQuestionAnswers, selectQuestion } from '@slice/questions';\r\nimport { SimpleInputAnswer, ValidateForm } from '@components';\r\n\r\ninterface AnswersListProps {\r\n  validate: (b: boolean) => void;\r\n}\r\n\r\nexport function AnswersList({ validate }: AnswersListProps) {\r\n  const question = useQuestionSelector(selectQuestion);\r\n  const [selectedAnswerRight, setAnswerRight] = useState(question.answerright);\r\n  const [answer, setAnswer] = useState([\r\n    { id: 1, name: 'answer1', value: '' },\r\n    { id: 2, name: 'answer2', value: '' },\r\n    { id: 3, name: 'answer3', value: '' },\r\n    { id: 4, name: 'answer4', value: '' },\r\n  ]);\r\n  const dispatch = useQuestionDispatch();\r\n\r\n  const handleAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const tname = e.target.name;\r\n    const tvalue = e.target.value;\r\n\r\n    const newAnswers = answer.map((item) => {\r\n      if (item.name === tname) {\r\n        return {\r\n          ...item,\r\n          value: tvalue,\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    \r\n    setAnswer(newAnswers);\r\n    dispatch(getQuestionAnswers(newAnswers))\r\n  };\r\n\r\n  const [validLength, setValidLength] = useState(false);\r\n  const [validButton, setValidButton] = useState(false);\r\n\r\n  validLength && validButton ? validate(true) : validate(false);\r\n\r\n  const hendelClick = (id: number) => {\r\n    setAnswerRight(id);\r\n    dispatch(getQuestionAnswerright(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        {answer.map((item) => (\r\n          <SimpleInputAnswer\r\n            id={item.id}\r\n            selected={selectedAnswerRight}\r\n            value={item.value}\r\n            funcChange={handleAnswer}\r\n            funcButton={hendelClick}\r\n          />\r\n        ))}\r\n        <div className=\"py-4\">\r\n          <ValidateForm\r\n            text={\r\n              'Длина текста ответов должна быть не менее 1 не более 35 символов'\r\n            }\r\n            data={{ value: answer, lengthMin: 1, lengthMax: 35 }}\r\n            validation={setValidLength}\r\n          />\r\n          <ValidateForm\r\n            text={\r\n              'Обязательно нужно выбрать верный вариант ответа (вопросы для всех групп проходят модерацию)'\r\n            }\r\n            data={{ value: selectedAnswerRight, lengthMin: 0, lengthMax: 0 }}\r\n            validation={setValidButton}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  storeQuestion,\r\n  useQuestionDispatch,\r\n  useQuestionSelector,\r\n} from '@store/questions';\r\nimport {\r\n  getQuestionDefault,\r\n  selectQuestion,\r\n  showQuestionSlide,\r\n} from '@slice/questions';\r\nimport { TextList } from './NewQuestion/TextList';\r\nimport StepsForm from './NewQuestion/StepsForm';\r\nimport { CategoryList } from './NewQuestion/CategoryList';\r\nimport { AnswersList } from './NewQuestion/AnswersList';\r\nimport { useAddQuestionMutation } from '@api/question';\r\nimport { HeaderBlock, MainBlock, Page } from '@components';\r\nimport {\r\n  useMainButton,\r\n  useStepsForm,\r\n} from '@utils';\r\n\r\ninterface NewQuesionProps {\r\n  success: (b: boolean) => void;\r\n}\r\n\r\nexport const NewQuesion = ({ success }: NewQuesionProps) => {\r\n  const dispatch = useQuestionDispatch();\r\n  const user = 521884639;\r\n  const question = useQuestionSelector(selectQuestion);\r\n\r\n  async function onSubmit() {\r\n    if (!isLastStep) {\r\n      next();\r\n    }\r\n    if (isLastStep) {\r\n      await addQuestion({\r\n        text: question.text,\r\n        chat: user as unknown as bigint,\r\n        category: question.category,\r\n        answer1: question.answers[0].value,\r\n        answer2: question.answers[1].value,\r\n        answer3: question.answers[2].value,\r\n        answer4: question.answers[3].value,\r\n        answerright: question.answerright,\r\n      });\r\n      success(true);\r\n      dispatch(getQuestionDefault());\r\n      dispatch(showQuestionSlide(false));\r\n    }\r\n  }\r\n\r\n  const { setMainButtonState } = useMainButton(onSubmit);\r\n\r\n  const validate = (b: boolean) => {\r\n    setMainButtonState(b);\r\n  };\r\n\r\n  const { steps, currentStepIndex, step, isLastStep, next } = useStepsForm([\r\n    <TextList validate={validate} />,\r\n    <CategoryList validate={validate} />,\r\n    <AnswersList validate={validate} />,\r\n  ]);\r\n\r\n  const [addQuestion, {}] = useAddQuestionMutation();\r\n\r\n  console.log(useQuestionSelector(storeQuestion.getState));\r\n\r\n  return (\r\n    <Page>\r\n      <HeaderBlock>\r\n        <StepsForm step={currentStepIndex + 1} stepsCount={steps.length} />\r\n      </HeaderBlock>\r\n      <MainBlock>{step}</MainBlock>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default NewQuesion;\r\n","import {\r\n  ButtonIcon,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n  SlidePage,\r\n} from '@components';\r\nimport { QuestionList } from './QuestionList';\r\nimport { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  selectQuestionSlide,\r\n  selectQuestionType,\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n} from '@slice/questions';\r\nimport NewQuesion from './NewQuesion';\r\nimport { useEffect, useState } from 'react';\r\nimport { useBackButton, useMainButton } from '@utils';\r\n\r\nexport const QuestionsPage = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const slide = useQuestionSelector(selectQuestionSlide);\r\n  const type = useQuestionSelector(selectQuestionType);\r\n  const [successAdd, setSuccessAdd] = useState(false);\r\n\r\n  useBackButton(slide, () => dispatch(showQuestionSlide(false)));\r\n\r\n  const addQuestion = () => {\r\n    dispatch(typeQuestion('addQuestion'));\r\n    dispatch(showQuestionSlide(true));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (successAdd) {\r\n      tg.MainButton.hide();\r\n      tg.showConfirm('Вопрос успешно добавлен!', console.log('showPopup'));\r\n    }\r\n  }, [successAdd]);\r\n\r\n  const successAddQuestion = (b: boolean) => {\r\n    setSuccessAdd(b);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Page>\r\n        <GlobalHeader>\r\n          <ButtonIcon\r\n            firstIcon={true}\r\n            text={'Добавить вопрос'}\r\n            color={'[var(--tg-theme-accent-text-color)]'}\r\n            icon={'add'}\r\n            func={addQuestion}\r\n          />\r\n        </GlobalHeader>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <QuestionList />\r\n        </MainBlock>\r\n      </Page>\r\n      <SlidePage slide={slide}>\r\n        {type == 'addQuestion' && <NewQuesion success={successAddQuestion} />}\r\n      </SlidePage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","import { Provider } from 'react-redux';\r\nimport { storeQuestion } from '@store/questions';\r\nimport QuestionsPage from './components/QuestionsPage';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Provider store={storeQuestion}>\r\n        <QuestionsPage />\r\n      </Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","const tg = window.Telegram.WebApp;\r\n\r\ninterface IAnswers {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\ninterface IValidationLengthForm {\r\n  value: string | number | IAnswers[];\r\n  lengthMin: number;\r\n  lengthMax: number;\r\n}\r\n\r\ninterface IAddQuestionFront {\r\n  text: string;\r\n  category: number;\r\n  answers: IAnswers[];\r\n  answerright: number;\r\n}\r\n\r\ninterface IAddQuestionBack {\r\n  chat: bigint;\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nlet getAddQuestion: IAddQuestionBack;\r\n\r\nexport const classNames = (...classes: string[]) => {\r\n  return classes.filter(Boolean).join(' ');\r\n};\r\n\r\nexport const addGroup = () => {\r\n  tg.openTelegramLink('https://t.me/ViktorinaOnlineBot?startgroup=add');\r\n};\r\n\r\nexport const inDevelopment = () => {\r\n  tg.showAlert(\r\n    'Данная функция находится в разработке',\r\n    console.log('inDevelopment')\r\n  );\r\n};\r\n\r\nexport const deleteGroup = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const deleteQuestion = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const validationLengthForm = (data: IValidationLengthForm): boolean => {\r\n  if (typeof data.value === 'string') {\r\n    if (\r\n      data.value.length < data.lengthMin ||\r\n      data.value.length > data.lengthMax\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'number') {\r\n    if (data.value === 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'object') {\r\n    let x: number = 0;\r\n    let res: boolean = false;\r\n    data.value.map((item) => {\r\n      if (\r\n        item.value.length >= data.lengthMin &&\r\n        item.value.length < data.lengthMax\r\n      ) {\r\n        x++;\r\n      }\r\n    });\r\n    x === data.value.length ? (res = true) : (res = false);\r\n    return res;\r\n  }\r\n  return false;\r\n};\r\n","import { ReactElement, useState } from 'react';\r\n\r\nexport function useStepsForm(steps: ReactElement[]) {\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n\r\n  function next() {\r\n    setCurrentStepIndex((i) => {\r\n      if (i >= steps.length - 1) return i;\r\n      return i + 1;\r\n    });\r\n  }\r\n\r\n  function back() {\r\n    setCurrentStepIndex((i) => {\r\n      if (i <= 0) return i;\r\n      return i - 1;\r\n    });\r\n  }\r\n\r\n  function goTo(index: number) {\r\n    setCurrentStepIndex(index);\r\n  }\r\n\r\n  return {\r\n    currentStepIndex,\r\n    step: steps[currentStepIndex],\r\n    steps,\r\n    isFirstStep: currentStepIndex === 0,\r\n    isLastStep: currentStepIndex === steps.length - 1,\r\n    goTo,\r\n    next,\r\n    back,\r\n  };\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\ntype FunctionProps = () => void;\r\n\r\nexport const useMainButton = (onSubmit: FunctionProps) => {\r\n  const tg = window.Telegram.WebApp;\r\n  const [mainButtonState, setMainButtonState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    mainButtonState\r\n      ? (tg.MainButton.setText('Далее'),\r\n        tg.MainButton.show(),\r\n        tg.onEvent('mainButtonClicked', onSubmit))\r\n      : tg.MainButton.hide();\r\n    return () => {\r\n      tg.MainButton.hide();\r\n      tg.offEvent('mainButtonClicked', onSubmit);\r\n    };\r\n  }, [mainButtonState]);\r\n\r\n  return { setMainButtonState };\r\n};\r\n","import { useEffect } from 'react';\r\n\r\ntype FunctionProps = () => void;\r\n\r\nexport const useBackButton = (state: boolean, onSubmit: FunctionProps) => {\r\n  const tg = window.Telegram.WebApp;\r\n\r\n  useEffect(() => {\r\n    state\r\n      ? (tg.BackButton.show(),\r\n        tg.onEvent('backButtonClicked', (tg.MainButton.hide(), onSubmit)))\r\n      : tg.BackButton.hide();\r\n  }, [state]);\r\n};\r\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["initialAnswers","id","name","value","initialState","questionSlide","questionType","questionData","undefined","addQuestion","text","category","answers","answerright","questionAppSlice","createSlice","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswers","getQuestionAnswerright","getQuestionDefault","actions","selectQuestionSlide","questionApp","selectQuestionType","selectQuestionText","selectQuestionCategory","selectQuestion","storeQuestion","configureStore","reducer","globalApi","reducerPath","middleware","getDefaultMiddleware","concat","useQuestionDispatch","useDispatch","useQuestionSelector","useSelector","extendedApiSlice","injectEndpoints","endpoints","build","getQuestionById","query","url","getQuestionByChat","chat","updateQuestion","mutation","question","method","body","deleteQuestion","countAvailableQuestion","providesTags","countPublishedQuestion","useGetQuestionByChatQuery","useGetQuestionByIdQuery","useAddQuestionMutation","useDeleteQuestionMutation","useUpdateQuestionMutation","useCountAvailableQuestionQuery","useCountPublishedQuestionQuery","QuestionListItem","isLoading","data","isSuccess","_jsxs","_Fragment","children","_jsx","Preloader","map","item","className","SimpleAccordionMain","description","SimpleAccordionText","String","dateadd","content","ButtonIcon","firstIcon","color","icon","func","inDevelopment","ButtonIconConfirm","textConfirm","QuestionList","role","TextList","validate","tg","window","Telegram","WebApp","questionText","dispatch","setText","useState","textLength","setTextLength","useEffect","confirm","b","handleText","setTimeout","showConfirm","txt","SimpleTextArea","label","rows","e","target","ValidateForm","lengthMin","lengthMax","validation","StepsForm","step","stepsCount","steps","i","push","status","CategoryList","questionCategory","console","log","useGetCategoryQuery","selectedCategory","setCategory","find","validCategory","setValidCategory","SimpleCategorySelect","cat","AnswersList","selectedAnswerRight","setAnswerRight","answer","setAnswer","handleAnswer","tname","tvalue","newAnswers","Object","assign","validLength","setValidLength","validButton","setValidButton","hendelClick","SimpleInputAnswer","selected","funcChange","funcButton","NewQuesion","success","setMainButtonState","useMainButton","async","isLastStep","next","answer1","answer2","answer3","answer4","currentStepIndex","useStepsForm","getState","Page","HeaderBlock","length","MainBlock","QuestionsPage","slide","type","successAdd","setSuccessAdd","useBackButton","MainButton","hide","GlobalHeader","SlidePage","App","Provider","store","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","createApi","refetchOnFocus","baseQuery","tagTypes","classNames","classes","filter","Boolean","join","showAlert","openTelegramLink","validationLengthForm","x","res","setCurrentStepIndex","isFirstStep","goTo","index","back","onSubmit","mainButtonState","show","onEvent","offEvent","BackButton","f","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","d","h","call","defaultProps","$$typeof","props","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}