{"version":3,"file":"464.js","mappings":"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","sources":["webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/../../libs/api/src/question.api.ts","webpack://questions/./src/app/components/QuestionListItem.tsx","webpack://questions/./src/app/components/QuestionList.tsx","webpack://questions/./src/app/components/NewQuestion/TextList.tsx","webpack://questions/./src/app/components/NewQuestion/StepsForm.tsx","webpack://questions/./src/app/components/NewQuestion/CategoryList.tsx","webpack://questions/./src/app/components/NewQuestion/AnswersList.tsx","webpack://questions/./src/app/components/NewQuesion.tsx","webpack://questions/./src/app/components/QuestionsPage.tsx","webpack://questions/./src/app/app.tsx","webpack://questions/../../libs/api/src/global.api.ts","webpack://questions/../../libs/utils/src/func.ts","webpack://questions/../../libs/utils/src/stepsForm.ts","webpack://questions/../../libs/utils/src/mainButton.ts","webpack://questions/../../libs/utils/src/backButton.ts","webpack://questions/../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://questions/../../node_modules/react/jsx-runtime.js"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'; \r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '..'; \r\n\r\nexport interface IAddQuestion {\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestion;\r\n}\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswerOne: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer1 = action.payload;\r\n    },\r\n    getQuestionAnswerTwo: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer2 = action.payload;\r\n    },\r\n    getQuestionAnswerThree: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer3 = action.payload;\r\n    },\r\n    getQuestionAnswerFour: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer4 = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answer1 = '';\r\n      state.addQuestion.answer2 = '';\r\n      state.addQuestion.answer3 = '';\r\n      state.addQuestion.answer4 = '';\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerOne = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer1;\r\nexport const selectQuestionAnswerTwo = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer2;\r\nexport const selectQuestionAnswerThree = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer3;\r\nexport const selectQuestionAnswerFour = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer4;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer; \r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from './slices/questionApp.slice'; \r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import { IQuestion } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport interface IAddQuestion {\r\n  chat: bigint;\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getQuestionById: build.query<IQuestion, number>({\r\n      query: (id) => ({\r\n        url: `question/findById/${id}`,\r\n      }),\r\n    }),\r\n\r\n    getQuestionByChat: build.query<IQuestion[], number>({\r\n      query: (chat) => ({\r\n        url: `question/findByChatId/${chat}`,\r\n      }),\r\n    }),\r\n\r\n    updateQuestion: build.mutation<IQuestion, any>({\r\n      query: ({ id, question }) => ({\r\n        url: `/question/${id}`,\r\n        method: \"PATCH\",\r\n        body: { question },\r\n      }),\r\n    }),\r\n\r\n    addQuestion: build.mutation<IQuestion, IAddQuestion>({\r\n      query: (question) => ({ \r\n        url: `/question`,\r\n        method: \"POST\",\r\n        body: question,\r\n      }),\r\n    }),\r\n\r\n    deleteQuestion: build.mutation<number, number>({\r\n      query: (id) => ({\r\n        url: `/chat-category`,\r\n        method: \"DELETE\",\r\n        body: { id },\r\n      }),\r\n    }),\r\n\r\n    countAvailableQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countAvailableQuestionByChatId/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n    countPublishedQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countPublishedQuestion/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetQuestionByChatQuery,\r\n  useGetQuestionByIdQuery,\r\n  useAddQuestionMutation,\r\n  useDeleteQuestionMutation,\r\n  useUpdateQuestionMutation,\r\n  useCountAvailableQuestionQuery,\r\n  useCountPublishedQuestionQuery\r\n} = extendedApiSlice;\r\n","import {\r\n  ButtonIcon,\r\n  ButtonIconConfirm,\r\n  Preloader,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\nimport { useGetQuestionByChatQuery } from '@api/question';\r\nimport { deleteQuestion, inDevelopment } from '@utils';\r\n\r\ninterface QuestionListItemProps {\r\n  chat: number;\r\n}\r\n\r\nexport const QuestionListItem = ({ chat }: QuestionListItemProps) => {\r\n  const { isLoading, data, isSuccess } = useGetQuestionByChatQuery(chat);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      {isSuccess &&\r\n        data.map((item) => (\r\n          <li className=\"cursor-pointer\">\r\n            <SimpleAccordionMain\r\n              description={\r\n                <SimpleAccordionText>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Дата: {String(item.dateadd)}\r\n                  </span>\r\n                  <p className=\"line-clamp-3\">{item.text}</p>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Категория: {item.category}\r\n                  </span>\r\n                </SimpleAccordionText>\r\n              }\r\n              content={\r\n                <>\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Модерировать'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'moderate'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Статистика'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'stat'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Отправить'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'send'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIconConfirm\r\n                    firstIcon={true}\r\n                    text={'Удалить'}\r\n                    color={'red-500'}\r\n                    icon={'delete'}\r\n                    func={deleteQuestion}\r\n                    textConfirm={`Вы действительно хотите удалить вопрос №${\r\n                      isSuccess ? data[0].id : 'не success'\r\n                    }`}\r\n                  />\r\n                </>\r\n              }\r\n            />\r\n          </li>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n","import { QuestionListItem } from './QuestionListItem';\r\n\r\nexport const QuestionList = () => {\r\n  return (\r\n    <ul\r\n      role=\"list\"\r\n      className=\"divide-y divide-[var(--tg-theme-hint-color)]\"\r\n    >\r\n      <QuestionListItem chat={521884639} />\r\n    </ul>\r\n  );\r\n};\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  getQuestionDefault,\r\n  getQuestionText,\r\n  selectQuestionText,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { SimpleTextArea, ValidateForm } from '@components';\r\n\r\ninterface TextListProps {\r\n  validate: (b: boolean) => void;\r\n}\r\n\r\nexport function TextList({ validate }: TextListProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const questionText = useQuestionSelector(selectQuestionText);\r\n  const dispatch = useQuestionDispatch();\r\n  const [text, setText] = useState('');\r\n  const [textLength, setTextLength] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const confirm = (b: boolean) => {\r\n      if (b) return handleText(questionText);\r\n      return dispatch(getQuestionDefault(''));\r\n    };\r\n    setTimeout(() => {\r\n      if (questionText != '') {\r\n        tg.showConfirm(`Применить несохранённый черновик?`, confirm);\r\n      }\r\n    }, 1500);\r\n  }, []);\r\n\r\n  textLength ? validate(true) : validate(false);\r\n\r\n  const handleText = (txt: string) => {\r\n    setText(txt);\r\n    dispatch(getQuestionText(txt));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        <SimpleTextArea\r\n          label={'Текст вопроса:'}\r\n          rows={5}\r\n          value={text}\r\n          func={(e) => handleText(e.target.value)}\r\n        />\r\n        <div className=\"py-4\">\r\n          <ValidateForm\r\n            text={\r\n              'Длина текста вопроса должна быть не менее 10 не более 250 символов'\r\n            }\r\n            data={{ value: text, lengthMin: 10, lengthMax: 250 }}\r\n            validation={setTextLength}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","interface StepsFormProps {\r\n  step: number;\r\n  stepsCount: number;\r\n}\r\n\r\ninterface Steps {\r\n  id: number;\r\n  status: string;\r\n}\r\n\r\nexport default function StepsForm({ step, stepsCount }: StepsFormProps) {\r\n  let steps: Steps[] = [];\r\n\r\n  //хз\r\n  for (let i = 0; i < stepsCount; i++) {\r\n    steps.push({\r\n      id: i,\r\n      status: step > i ? \"complete\" : \"upcoming\",\r\n    });\r\n  }\r\n  //хз\r\n\r\n  return (\r\n    <nav className=\"flex items-center px-8 pt-8 pb-4 bg-[var(--tg-theme-bg-color)] space-x-3 justify-center\" aria-label=\"Progress\">\r\n      <p className=\"text-sm font-medium text-[var(--tg-theme-accent-text-color)]\">\r\n        Шаг {step} из {stepsCount}\r\n      </p>\r\n      <ol role=\"list\" className=\"ml-8 flex items-center space-x-5\">\r\n        {steps.map((step) => (\r\n          <li key={step.id}>\r\n            {step.status === \"complete\" ? (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"></span>\r\n            ) : step.status === \"current\" ? (\r\n              <span\r\n                className=\"relative flex items-center justify-center\"\r\n                aria-current=\"step\"\r\n              >\r\n                <span className=\"absolute flex h-5 w-5 p-px\" aria-hidden=\"true\">\r\n                  <span className=\"h-full w-full rounded-full bg-[var(--tg-theme-text-color)]\" />\r\n                </span>\r\n                <span\r\n                  className=\"relative block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            ) : (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-text-color)]\"></span>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  getQuestionCategory,\r\n  selectQuestionCategory,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { useState } from 'react';\r\nimport { ICategory } from '@models';\r\nimport { useGetCategoryQuery } from '@api/category';\r\nimport { SimpleCategorySelect, ValidateForm } from '@components';\r\n\r\ninterface CategoryListProps {\r\n  validate: (b: boolean) => void;\r\n}\r\n\r\nexport function CategoryList({ validate }: CategoryListProps) {\r\n  const questionCategory = useQuestionSelector(selectQuestionCategory);\r\n  console.log('questionCategory', questionCategory);\r\n  const { data } = useGetCategoryQuery('');\r\n  console.log('data', data);\r\n  const dispatch = useQuestionDispatch();\r\n  const [selectedCategory, setCategory] = useState(\r\n    data && questionCategory != 0\r\n      ? data.find((id) => id.id === questionCategory)\r\n      : { id: 0, name: '' }\r\n  );\r\n  console.log('selectedCategory', selectedCategory);\r\n\r\n  const handleChange = (cat: ICategory) => {\r\n    setCategory(cat);\r\n    dispatch(getQuestionCategory(cat.id));\r\n  };\r\n\r\n  const [validCategory, setValidCategory] = useState(false);\r\n\r\n  validCategory ? validate(true) : validate(false);\r\n\r\n  return (\r\n    <div className=\"py-2\">\r\n      {data && (\r\n        <SimpleCategorySelect\r\n          value={selectedCategory ? selectedCategory : { id: 0, name: ' ' }}\r\n          func={handleChange}\r\n          data={data}\r\n        />\r\n      )}\r\n      <div className=\"py-4\">\r\n        <ValidateForm\r\n          text={'Выберите подходящую категорию'}\r\n          data={{\r\n            value: selectedCategory ? selectedCategory.id : 0,\r\n            lengthMin: 0,\r\n            lengthMax: 0,\r\n          }}\r\n          validation={setValidCategory}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useState } from 'react';\r\nimport {\r\n  getQuestionAnswerright,\r\n  selectQuestion,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { SimpleInputAnswer, ValidateForm } from '@components';\r\n\r\ninterface AnswersListProps {\r\n  validate: (b: boolean) => void;\r\n}\r\n\r\nexport function AnswersList({ validate }: AnswersListProps) {\r\n  const question = useQuestionSelector(selectQuestion);\r\n  const [selectedAnswerRight, setAnswerRight] = useState(question.answerright);\r\n  const [answer, setAnswer] = useState([\r\n    { id: 1, name: 'Answer1', value: '' },\r\n    { id: 2, name: 'Answer2', value: '' },\r\n    { id: 3, name: 'Answer3', value: '' },\r\n    { id: 4, name: 'Answer4', value: '' },\r\n  ]);\r\n  const dispatch = useQuestionDispatch();\r\n\r\n  const handleAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const tname = e.target.name;\r\n    const tvalue = e.target.value;\r\n\r\n    const newAnswers = answer.map((item) => {\r\n      if (item.name === tname) {\r\n        return {\r\n          ...item,\r\n          value: tvalue,\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setAnswer(newAnswers);\r\n  };\r\n\r\n  const [validLength, setValidLength] = useState(false);\r\n  const [validButton, setValidButton] = useState(false);\r\n\r\n  validLength && validButton ? validate(true) : validate(false);\r\n\r\n  const hendelClick = (id: number) => {\r\n    setAnswerRight(id);\r\n    dispatch(getQuestionAnswerright(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        {answer.map((item) => (\r\n          <SimpleInputAnswer\r\n            id={item.id}\r\n            selected={selectedAnswerRight}\r\n            value={item.value}\r\n            funcChange={handleAnswer}\r\n            funcButton={hendelClick}\r\n          />\r\n        ))}\r\n        <div className=\"py-4\">\r\n          <ValidateForm\r\n            text={\r\n              'Длина текста ответов должна быть не менее 1 не более 35 символов'\r\n            }\r\n            data={{ value: answer, lengthMin: 1, lengthMax: 35 }}\r\n            validation={setValidLength}\r\n          />\r\n          <ValidateForm\r\n            text={\r\n              'Обязательно нужно выбрать верный вариант ответа (вопросы для всех групп проходят модерацию)'\r\n            }\r\n            data={{ value: selectedAnswerRight, lengthMin: 0, lengthMax: 0 }}\r\n            validation={setValidButton}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  getQuestionDefault,\r\n  selectQuestion,\r\n  showQuestionSlide,\r\n} from '../store/slices/questionApp.slice';\r\nimport { TextList } from './NewQuestion/TextList';\r\nimport StepsForm from './NewQuestion/StepsForm';\r\nimport { CategoryList } from './NewQuestion/CategoryList';\r\nimport { AnswersList } from './NewQuestion/AnswersList';\r\nimport { useAddQuestionMutation } from '@api/question';\r\nimport { HeaderBlock, MainBlock, Page } from '@components';\r\nimport { useMainButton, useStepsForm } from '@utils';\r\n\r\ninterface NewQuesionProps {\r\n  success: (b: boolean) => void;\r\n}\r\n\r\nexport const NewQuesion = ({ success }: NewQuesionProps) => {\r\n  const dispatch = useQuestionDispatch();\r\n  const user = 521884639;\r\n  const question = useQuestionSelector(selectQuestion);\r\n\r\n  function onSubmit() {\r\n    if (!isLastStep) {\r\n      next();\r\n    }\r\n    if (isLastStep) {\r\n      dispatch(showQuestionSlide(false));\r\n      dispatch(getQuestionDefault(''));\r\n      // success(true);\r\n    }\r\n  }\r\n\r\n  const { setMainButtonState } = useMainButton(onSubmit);\r\n\r\n  const validate = (b: boolean) => {\r\n    setMainButtonState(b);\r\n  };\r\n\r\n  const { steps, currentStepIndex, step, isLastStep, next } = useStepsForm([\r\n    <TextList validate={validate} />,\r\n    <CategoryList validate={validate} />,\r\n    <AnswersList validate={validate} />,\r\n  ]);\r\n\r\n  const [addQuestion, {}] = useAddQuestionMutation();\r\n\r\n  return (\r\n    <Page>\r\n      <HeaderBlock>\r\n        <StepsForm step={currentStepIndex + 1} stepsCount={steps.length} />\r\n      </HeaderBlock>\r\n      <MainBlock>{step}</MainBlock>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default NewQuesion;\r\n","import {\r\n  ButtonIcon,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n  SlidePage,\r\n} from '@components';\r\nimport { QuestionList } from './QuestionList';\r\nimport { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  selectQuestionSlide,\r\n  selectQuestionType,\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n} from '../store/slices/questionApp.slice';\r\nimport NewQuesion from './NewQuesion';\r\nimport { useEffect, useState } from 'react';\r\nimport { useBackButton } from '@utils';\r\n\r\nexport const QuestionsPage = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const slide = useQuestionSelector(selectQuestionSlide);\r\n  const type = useQuestionSelector(selectQuestionType);\r\n  const [successAdd, setSuccessAdd] = useState(false);\r\n\r\n  useBackButton(slide, () => dispatch(showQuestionSlide(false)));\r\n\r\n  const addQuestion = () => {\r\n    dispatch(typeQuestion('addQuestion'));\r\n    dispatch(showQuestionSlide(true));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (successAdd) {\r\n      tg.showConfirm('Вопрос успешно добавлен!', console.log('showPopup'));\r\n    }\r\n  }, [successAdd]);\r\n\r\n  const successAddQuestion = (b: boolean) => {\r\n    setSuccessAdd(b);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Page>\r\n        <GlobalHeader>\r\n          <ButtonIcon\r\n            firstIcon={true}\r\n            text={'Добавить вопрос'}\r\n            color={'[var(--tg-theme-accent-text-color)]'}\r\n            icon={'add'}\r\n            func={addQuestion}\r\n          />\r\n        </GlobalHeader>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <QuestionList />\r\n        </MainBlock>\r\n      </Page>\r\n      <SlidePage slide={slide}>\r\n        {type == 'addQuestion' && <NewQuesion success={successAddQuestion} />}\r\n      </SlidePage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","import { Provider } from 'react-redux';\r\nimport { storeQuestion } from '@store/questions';\r\nimport QuestionsPage from './components/QuestionsPage';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Provider store={storeQuestion}>\r\n        <QuestionsPage />\r\n      </Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","const tg = window.Telegram.WebApp;\r\n\r\ninterface IAnswers {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\ninterface IValidationLengthForm {\r\n  value: string | number | IAnswers[];\r\n  lengthMin: number;\r\n  lengthMax: number;\r\n}\r\n\r\nexport const classNames = (...classes: string[]) => {\r\n  return classes.filter(Boolean).join(' ');\r\n};\r\n\r\nexport const addGroup = () => {\r\n  tg.openTelegramLink('https://t.me/ViktorinaOnlineBot?startgroup=add');\r\n};\r\n\r\nexport const inDevelopment = () => {\r\n  tg.showAlert(\r\n    'Данная функция находится в разработке',\r\n    console.log('inDevelopment')\r\n  );\r\n};\r\n\r\nexport const deleteGroup = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const deleteQuestion = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const validationLengthForm = (data: IValidationLengthForm): boolean => {\r\n  if (typeof data.value === 'string') {\r\n    if (\r\n      data.value.length < data.lengthMin ||\r\n      data.value.length > data.lengthMax\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'number') {\r\n    if (data.value === 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'object') {\r\n    let x: number = 0;\r\n    let res: boolean = false;\r\n    data.value.map((item) => {\r\n      if (\r\n        item.value.length >= data.lengthMin &&\r\n        item.value.length < data.lengthMax\r\n      ) {\r\n        x++;\r\n      }\r\n    });\r\n    x === data.value.length ? (res = true) : (res = false);\r\n    return res;\r\n  }\r\n  return false;\r\n};\r\n","import { ReactElement, useState } from 'react';\r\n\r\nexport function useStepsForm(steps: ReactElement[]) {\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n\r\n  function next() {\r\n    setCurrentStepIndex((i) => {\r\n      if (i >= steps.length - 1) return i;\r\n      return i + 1;\r\n    });\r\n  }\r\n\r\n  function back() {\r\n    setCurrentStepIndex((i) => {\r\n      if (i <= 0) return i;\r\n      return i - 1;\r\n    });\r\n  }\r\n\r\n  function goTo(index: number) {\r\n    setCurrentStepIndex(index);\r\n  }\r\n\r\n  return {\r\n    currentStepIndex,\r\n    step: steps[currentStepIndex],\r\n    steps,\r\n    isFirstStep: currentStepIndex === 0,\r\n    isLastStep: currentStepIndex === steps.length - 1,\r\n    goTo,\r\n    next,\r\n    back,\r\n  };\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\ntype FunctionProps = () => void;\r\n\r\nexport const useMainButton = (onSubmit: FunctionProps) => {\r\n  const tg = window.Telegram.WebApp;\r\n  const [mainButtonState, setMainButtonState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    mainButtonState\r\n      ? (tg.MainButton.setText('Далее'),\r\n        tg.MainButton.show(),\r\n        tg.onEvent('mainButtonClicked', onSubmit))\r\n      : tg.MainButton.hide();\r\n    return () => {\r\n      tg.MainButton.hide();\r\n      tg.offEvent('mainButtonClicked', onSubmit);\r\n    };\r\n  }, [mainButtonState]);\r\n\r\n  return { setMainButtonState };\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\ntype FunctionProps = () => void;\r\n\r\nexport const useBackButton = (state: boolean, onSubmit: FunctionProps) => {\r\n  const tg = window.Telegram.WebApp;\r\n\r\n  useEffect(() => {\r\n    state\r\n      ? (tg.BackButton.show(), tg.onEvent('backButtonClicked', onSubmit))\r\n      : tg.BackButton.hide();\r\n  }, [state]);\r\n};\r\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["questionAppSlice","createSlice","name","initialState","questionSlide","questionType","questionData","undefined","addQuestion","text","category","answer1","answer2","answer3","answer4","answerright","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswerOne","getQuestionAnswerTwo","getQuestionAnswerThree","getQuestionAnswerFour","getQuestionAnswerright","getQuestionDefault","actions","selectQuestionSlide","questionApp","selectQuestionType","selectQuestionText","selectQuestionCategory","selectQuestion","storeQuestion","configureStore","reducer","globalApi","reducerPath","middleware","getDefaultMiddleware","concat","useQuestionDispatch","useDispatch","useQuestionSelector","useSelector","extendedApiSlice","injectEndpoints","endpoints","build","getQuestionById","query","id","url","getQuestionByChat","chat","updateQuestion","mutation","question","method","body","deleteQuestion","countAvailableQuestion","providesTags","countPublishedQuestion","useGetQuestionByChatQuery","useGetQuestionByIdQuery","useAddQuestionMutation","useDeleteQuestionMutation","useUpdateQuestionMutation","useCountAvailableQuestionQuery","useCountPublishedQuestionQuery","QuestionListItem","isLoading","data","isSuccess","_jsxs","_Fragment","children","_jsx","Preloader","map","item","className","SimpleAccordionMain","description","SimpleAccordionText","String","dateadd","content","ButtonIcon","firstIcon","color","icon","func","inDevelopment","ButtonIconConfirm","textConfirm","QuestionList","role","TextList","validate","tg","window","Telegram","WebApp","questionText","dispatch","setText","useState","textLength","setTextLength","useEffect","confirm","b","handleText","setTimeout","showConfirm","txt","SimpleTextArea","label","rows","value","e","target","ValidateForm","lengthMin","lengthMax","validation","StepsForm","step","stepsCount","steps","i","push","status","CategoryList","questionCategory","console","log","useGetCategoryQuery","selectedCategory","setCategory","find","validCategory","setValidCategory","SimpleCategorySelect","cat","AnswersList","selectedAnswerRight","setAnswerRight","answer","setAnswer","handleAnswer","tname","tvalue","newAnswers","Object","assign","validLength","setValidLength","validButton","setValidButton","hendelClick","SimpleInputAnswer","selected","funcChange","funcButton","NewQuesion","success","setMainButtonState","useMainButton","isLastStep","next","currentStepIndex","useStepsForm","Page","HeaderBlock","length","MainBlock","QuestionsPage","slide","type","successAdd","setSuccessAdd","useBackButton","GlobalHeader","SlidePage","App","Provider","store","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","createApi","refetchOnFocus","baseQuery","tagTypes","classNames","classes","filter","Boolean","join","showAlert","openTelegramLink","validationLengthForm","x","res","setCurrentStepIndex","isFirstStep","goTo","index","back","onSubmit","mainButtonState","MainButton","show","onEvent","hide","offEvent","BackButton","f","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","d","h","call","defaultProps","$$typeof","props","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}