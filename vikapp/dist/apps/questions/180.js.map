{"version":3,"file":"180.js","mappings":"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","sources":["webpack://questions/../../libs/api/src/question.api.ts","webpack://questions/./src/app/components/QuestionListItem.tsx","webpack://questions/./src/app/components/QuestionList.tsx","webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/./src/app/components/NewQuestion/TextList.tsx","webpack://questions/./src/app/components/NewQuestion/StepsForm.tsx","webpack://questions/./src/app/components/NewQuestion/CategoryList.tsx","webpack://questions/./src/app/components/NewQuestion/AnswersList.tsx","webpack://questions/./src/app/components/NewQuesion.tsx","webpack://questions/./src/app/hooks/useNewQuestionForm.ts","webpack://questions/./src/app/components/QuestionsPage.tsx","webpack://questions/./src/app/app.tsx","webpack://questions/../../libs/api/src/global.api.ts","webpack://questions/../../libs/utils/src/func.ts","webpack://questions/../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://questions/../../node_modules/react/jsx-runtime.js"],"sourcesContent":["import { IQuestion } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport interface IAddQuestion {\r\n  chat: bigint;\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getQuestionById: build.query<IQuestion, number>({\r\n      query: (id) => ({\r\n        url: `question/findById/${id}`,\r\n      }),\r\n    }),\r\n\r\n    getQuestionByChat: build.query<IQuestion[], number>({\r\n      query: (chat) => ({\r\n        url: `question/findByChatId/${chat}`,\r\n      }),\r\n    }),\r\n\r\n    updateQuestion: build.mutation<IQuestion, any>({\r\n      query: ({ id, question }) => ({\r\n        url: `/question/${id}`,\r\n        method: \"PATCH\",\r\n        body: { question },\r\n      }),\r\n    }),\r\n\r\n    addQuestion: build.mutation<IQuestion, IAddQuestion>({\r\n      query: (question) => ({ \r\n        url: `/question`,\r\n        method: \"POST\",\r\n        body: question,\r\n      }),\r\n    }),\r\n\r\n    deleteQuestion: build.mutation<number, number>({\r\n      query: (id) => ({\r\n        url: `/chat-category`,\r\n        method: \"DELETE\",\r\n        body: { id },\r\n      }),\r\n    }),\r\n\r\n    countAvailableQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countAvailableQuestionByChatId/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n    countPublishedQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countPublishedQuestion/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetQuestionByChatQuery,\r\n  useGetQuestionByIdQuery,\r\n  useAddQuestionMutation,\r\n  useDeleteQuestionMutation,\r\n  useUpdateQuestionMutation,\r\n  useCountAvailableQuestionQuery,\r\n  useCountPublishedQuestionQuery\r\n} = extendedApiSlice;\r\n","import {\r\n  ButtonIcon,\r\n  ButtonIconConfirm,\r\n  Preloader,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\nimport { useGetQuestionByChatQuery } from '@api/question';\r\nimport { deleteQuestion, inDevelopment } from '@utils';\r\n\r\ninterface QuestionListItemProps {\r\n  chat: number;\r\n}\r\n\r\nexport const QuestionListItem = ({ chat }: QuestionListItemProps) => {\r\n  const tg = window.Telegram.WebApp;\r\n  const { isLoading, data, isSuccess } = useGetQuestionByChatQuery(chat);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      {isSuccess &&\r\n        data.map((item) => (\r\n          <li className=\"cursor-pointer\">\r\n            <SimpleAccordionMain\r\n              description={\r\n                <SimpleAccordionText>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Дата: {String(item.dateadd)}\r\n                  </span>\r\n                  <p className=\"line-clamp-3\">{item.text}</p>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Категория: {item.category}\r\n                  </span>\r\n                </SimpleAccordionText>\r\n              }\r\n              content={\r\n                <>\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Модерировать'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'moderate'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Статистика'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'stat'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Отправить'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'send'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIconConfirm\r\n                    firstIcon={true}\r\n                    text={'Удалить'}\r\n                    color={'red-500'}\r\n                    icon={'delete'}\r\n                    func={deleteQuestion}\r\n                    textConfirm={`Вы действительно хотите удалить вопрос №${\r\n                      isSuccess ? data[0].id : 'не success'\r\n                    }`}\r\n                  />\r\n                </>\r\n              }\r\n            />\r\n          </li>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n","import { QuestionListItem } from './QuestionListItem';\r\n\r\nexport const QuestionList = () => {\r\n  return (\r\n    <ul\r\n      role=\"list\"\r\n      className=\"divide-y divide-[var(--tg-theme-hint-color)]\"\r\n    >\r\n      <QuestionListItem chat={521884639} />\r\n    </ul>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '..';\r\n\r\nexport interface IAddQuestion {\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestion;\r\n}\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswerOne: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer1 = action.payload;\r\n    },\r\n    getQuestionAnswerTwo: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer2 = action.payload;\r\n    },\r\n    getQuestionAnswerThree: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer3 = action.payload;\r\n    },\r\n    getQuestionAnswerFour: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer4 = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answer1 = '';\r\n      state.addQuestion.answer2 = '';\r\n      state.addQuestion.answer3 = '';\r\n      state.addQuestion.answer4 = '';\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerOne = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer1;\r\nexport const selectQuestionAnswerTwo = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer2;\r\nexport const selectQuestionAnswerThree = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer3;\r\nexport const selectQuestionAnswerFour = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer4;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer; \r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from './slices/questionApp.slice';\r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  getQuestionDefault,\r\n  getQuestionText,\r\n  selectQuestionText,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { SimpleTextArea, ValidateForm } from '@components';\r\n\r\ninterface TextListProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport function TextList({ onSubmit }: TextListProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const questionText = useQuestionSelector(selectQuestionText);\r\n  const dispatch = useQuestionDispatch();\r\n  const [text, setText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const confirm = (b: boolean) => {\r\n      if (b) return handleText(questionText);\r\n      return dispatch(getQuestionDefault(''));\r\n    };\r\n    setTimeout(() => {\r\n      if (questionText != '') {\r\n        tg.showConfirm(`Применить несохранённый черновик?`, confirm);\r\n      }\r\n    }, 1500);\r\n  }, []);\r\n\r\n  const validation = (approval: boolean) => {\r\n    approval\r\n      ? (tg.MainButton.setText('Следующий шаг'),\r\n        tg.MainButton.show(),\r\n        tg.onEvent('mainButtonClicked', onSubmit))\r\n      : tg.MainButton.hide();\r\n  };\r\n\r\n  const handleText = (txt: string) => {\r\n    setText(txt);\r\n    dispatch(getQuestionText(txt));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        <SimpleTextArea\r\n          label={'Текст вопроса:'}\r\n          rows={5}\r\n          value={text}\r\n          func={(e) => handleText(e.target.value)}\r\n        />\r\n        <div className=\"py-4\">\r\n          <ValidateForm\r\n            text={\r\n              'Длина текста вопроса должна быть не менее 10 не более 250 символов'\r\n            }\r\n            data={{ value: text, lengthMin: 10, lengthMax: 250 }}\r\n            validation={validation}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","interface StepsFormProps {\r\n  step: number;\r\n  stepsCount: number;\r\n}\r\n\r\ninterface Steps {\r\n  id: number;\r\n  status: string;\r\n}\r\n\r\nexport default function StepsForm({ step, stepsCount }: StepsFormProps) {\r\n  let steps: Steps[] = [];\r\n\r\n  //хз\r\n  for (let i = 0; i < stepsCount; i++) {\r\n    steps.push({\r\n      id: i,\r\n      status: step > i ? \"complete\" : \"upcoming\",\r\n    });\r\n  }\r\n  //хз\r\n\r\n  return (\r\n    <nav className=\"flex items-center px-8 pt-8 pb-4 bg-[var(--tg-theme-bg-color)] space-x-3 justify-center\" aria-label=\"Progress\">\r\n      <p className=\"text-sm font-medium text-[var(--tg-theme-accent-text-color)]\">\r\n        Шаг {step} из {stepsCount}\r\n      </p>\r\n      <ol role=\"list\" className=\"ml-8 flex items-center space-x-5\">\r\n        {steps.map((step) => (\r\n          <li key={step.id}>\r\n            {step.status === \"complete\" ? (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"></span>\r\n            ) : step.status === \"current\" ? (\r\n              <span\r\n                className=\"relative flex items-center justify-center\"\r\n                aria-current=\"step\"\r\n              >\r\n                <span className=\"absolute flex h-5 w-5 p-px\" aria-hidden=\"true\">\r\n                  <span className=\"h-full w-full rounded-full bg-[var(--tg-theme-text-color)]\" />\r\n                </span>\r\n                <span\r\n                  className=\"relative block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            ) : (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-text-color)]\"></span>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  getQuestionCategory,\r\n  selectQuestionCategory,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { useState } from 'react';\r\nimport { ICategory } from '@models';\r\nimport { useGetCategoryQuery } from '@api/category';\r\nimport { SimpleCategorySelect, ValidateForm } from '@components';\r\n\r\ninterface CategoryListProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nconst tg = window.Telegram.WebApp;\r\n\r\nexport function CategoryList({ onSubmit }: CategoryListProps) {\r\n  const questionCategory = useQuestionSelector(selectQuestionCategory);\r\n  const { data, isSuccess } = useGetCategoryQuery('');\r\n  const dispatch = useQuestionDispatch();\r\n  const [selectedCategory, setCategory] = useState(\r\n    questionCategory != 0 && typeof data === 'object'\r\n      ? data.find((id) => id.id === questionCategory)\r\n      : { id: 0, name: '' }\r\n  );\r\n\r\n  const handleChange = (cat: ICategory) => {\r\n    setCategory(cat);\r\n    dispatch(getQuestionCategory(cat.id));\r\n  };\r\n\r\n  const validation = (approval: boolean) => {\r\n    approval\r\n      ? (tg.MainButton.setText('Следующий шаг'),\r\n        tg.MainButton.show(),\r\n        tg.onEvent('mainButtonClicked', onSubmit))\r\n      : tg.MainButton.hide();\r\n  };\r\n\r\n  return (\r\n    <div className=\"py-2\">\r\n      {isSuccess && (\r\n        <SimpleCategorySelect\r\n          value={selectedCategory ? selectedCategory : { id: 0, name: ' ' }}\r\n          func={handleChange}\r\n          data={data}\r\n        />\r\n      )}\r\n      <div className=\"py-4\">\r\n        <ValidateForm\r\n          text={\r\n            'Выберите подходящую категорию'\r\n          }\r\n          data={{\r\n            value: selectedCategory ? selectedCategory.id : 0,\r\n            lengthMin: 0,\r\n            lengthMax: 0,\r\n          }}\r\n          validation={validation}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useState } from 'react';\r\nimport {\r\n  getQuestionAnswerright,\r\n  selectQuestion,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { SimpleInputAnswer, ValidateForm } from '@components';\r\n\r\ninterface AnswersListProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport function AnswersList({ onSubmit }: AnswersListProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const question = useQuestionSelector(selectQuestion);\r\n  const [selectedAnswerRight, setAnswerRight] = useState(question.answerright);\r\n  const [answer, setAnswer] = useState([\r\n    { id: 1, name: 'Answer1', value: '' },\r\n    { id: 2, name: 'Answer2', value: '' },\r\n    { id: 3, name: 'Answer3', value: '' },\r\n    { id: 4, name: 'Answer4', value: '' },\r\n  ]);\r\n  const dispatch = useQuestionDispatch();\r\n\r\n  const handleAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const tname = e.target.name;\r\n    const tvalue = e.target.value;\r\n\r\n    const newAnswers = answer.map((item) => {\r\n      if (item.name === tname) {\r\n        return {\r\n          ...item,\r\n          value: tvalue,\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setAnswer(newAnswers);\r\n  };\r\n\r\n  function validLength(approval: boolean) {\r\n    return approval;\r\n  }\r\n\r\n  function validationButton(approval: boolean) {\r\n    return approval;\r\n  }\r\n  console.log('validLength=', validLength);\r\n  console.log('validationButton=', validationButton);\r\n\r\n  // validLength() && validationButton\r\n  //   ? (tg.MainButton.setText('Следующий шаг'),\r\n  //     tg.MainButton.show(),\r\n  //     tg.onEvent('mainButtonClicked', () => {\r\n  //       tg.MainButton.hide(), onSubmit;\r\n  //     }))\r\n  //   : tg.MainButton.hide();\r\n\r\n  const hendelClick = (id: number) => {\r\n    setAnswerRight(id);\r\n    dispatch(getQuestionAnswerright(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        {answer.map((item) => (\r\n          <SimpleInputAnswer\r\n            id={item.id}\r\n            selected={selectedAnswerRight}\r\n            value={item.value}\r\n            funcChange={handleAnswer}\r\n            funcButton={hendelClick}\r\n          />\r\n        ))}\r\n        <div className=\"py-4\">\r\n          <ValidateForm\r\n            text={\r\n              'Длина текста ответов должна быть не менее 1 не более 35 символов'\r\n            }\r\n            data={{ value: answer, lengthMin: 1, lengthMax: 35 }}\r\n            validation={validLength}\r\n          />\r\n          <ValidateForm\r\n            text={\r\n              'Обязательно нужно выбрать верный вариант ответа (вопросы для всех групп проходят модерацию)'\r\n            }\r\n            data={{ value: selectedAnswerRight, lengthMin: 0, lengthMax: 0 }}\r\n            validation={validationButton}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  storeQuestion,\r\n  useQuestionDispatch,\r\n  useQuestionSelector,\r\n} from '@store/questions';\r\nimport {\r\n  getQuestionDefault,\r\n  selectQuestion,\r\n  showQuestionSlide,\r\n} from '../store/slices/questionApp.slice';\r\nimport { TextList } from './NewQuestion/TextList';\r\nimport StepsForm from './NewQuestion/StepsForm';\r\nimport { CategoryList } from './NewQuestion/CategoryList';\r\nimport { AnswersList } from './NewQuestion/AnswersList';\r\nimport { useNewQuestionForm } from '../hooks/useNewQuestionForm';\r\nimport { useAddQuestionMutation } from '@api/question';\r\nimport { HeaderBlock, MainBlock, Page } from '@components';\r\n\r\nexport const NewQuesion = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const user = 521884639;\r\n  const question = useQuestionSelector(selectQuestion);\r\n\r\n  const { steps, currentStepIndex, step, isLastStep, next } =\r\n    useNewQuestionForm([\r\n      <TextList onSubmit={onSubmit} />,\r\n      <CategoryList onSubmit={onSubmit} />,\r\n      <AnswersList onSubmit={onSubmit} />,\r\n    ]);\r\n\r\n  const [addQuestion, {}] = useAddQuestionMutation();\r\n\r\n  async function onSubmit() {\r\n    tg.MainButton.hide();\r\n    if (!isLastStep) return next();\r\n    if (isLastStep) {\r\n      await addQuestion({\r\n        chat: user as unknown as bigint,\r\n        text: question.text,\r\n        category: question.category,\r\n        answer1: question.answer1,\r\n        answer2: question.answer2,\r\n        answer3: question.answer3,\r\n        answer4: question.answer4,\r\n        answerright: question.answerright,\r\n      });\r\n      dispatch(showQuestionSlide(false));\r\n      dispatch(getQuestionDefault(''));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <HeaderBlock>\r\n        <StepsForm step={currentStepIndex + 1} stepsCount={steps.length} />\r\n      </HeaderBlock>\r\n      <MainBlock>{step}</MainBlock>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default NewQuesion;\r\n","import { ReactElement, useState } from \"react\"\r\n\r\nexport function useNewQuestionForm(steps: ReactElement[]) {\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0)\r\n\r\n  function next() {\r\n    setCurrentStepIndex(i => {\r\n      if (i >= steps.length - 1) return i\r\n      return i + 1\r\n    })\r\n  }\r\n\r\n  function back() {\r\n    setCurrentStepIndex(i => {\r\n      if (i <= 0) return i\r\n      return i - 1\r\n    })\r\n  }\r\n\r\n  function goTo(index: number) {\r\n    setCurrentStepIndex(index)\r\n  }\r\n\r\n  return {\r\n    currentStepIndex,\r\n    step: steps[currentStepIndex],\r\n    steps,\r\n    isFirstStep: currentStepIndex === 0,\r\n    isLastStep: currentStepIndex === steps.length - 1,\r\n    goTo,\r\n    next,\r\n    back,\r\n  }\r\n}","import {\r\n  ButtonIcon,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n  SlidePage,\r\n} from '@components';\r\nimport { QuestionList } from './QuestionList';\r\nimport { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  selectQuestionSlide,\r\n  selectQuestionType,\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n} from '../store/slices/questionApp.slice';\r\nimport NewQuesion from './NewQuesion';\r\n\r\nexport const QuestionsPage = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const slide = useQuestionSelector(selectQuestionSlide);\r\n  const type = useQuestionSelector(selectQuestionType);\r\n\r\n  if (slide) {\r\n    tg.BackButton.show();\r\n    tg.onEvent('backButtonClicked', () => {\r\n      dispatch(showQuestionSlide(false));\r\n    });\r\n  }\r\n\r\n  const addQuestion = () => {\r\n    dispatch(typeQuestion('addQuestion'));\r\n    dispatch(showQuestionSlide(true));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalHeader>\r\n        <ButtonIcon\r\n          firstIcon={true}\r\n          text={'Добавить вопрос'}\r\n          color={'[var(--tg-theme-accent-text-color)]'}\r\n          icon={'add'}\r\n          func={addQuestion}\r\n        />\r\n      </GlobalHeader>\r\n      <Page>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <QuestionList />\r\n        </MainBlock>\r\n      </Page>\r\n      <SlidePage slide={slide}>\r\n        {type == 'addQuestion' && <NewQuesion />}\r\n      </SlidePage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","import { Provider } from 'react-redux';\nimport QuestionsPage from './components/QuestionsPage';\nimport { storeQuestion } from '@store/questions';\n\nexport const App = () => {\n  return (\n    <>\n      <Provider store={storeQuestion}>\n        <QuestionsPage />\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","const tg = window.Telegram.WebApp;\r\n\r\ninterface IAnswers {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\ninterface IValidationLengthForm {\r\n  value: string | number | IAnswers[];\r\n  lengthMin: number;\r\n  lengthMax: number;\r\n}\r\n\r\nexport const addGroup = () => {\r\n  tg.openTelegramLink('https://t.me/ViktorinaOnlineBot?startgroup=add');\r\n};\r\n\r\nexport const inDevelopment = () => {\r\n  tg.showAlert(\r\n    'Данная функция находится в разработке',\r\n    console.log('inDevelopment')\r\n  );\r\n};\r\n\r\nexport const deleteGroup = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const deleteQuestion = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const validationLengthForm = (data: IValidationLengthForm): boolean => {\r\n  if (typeof data.value === 'string') {\r\n    if (\r\n      data.value.length < data.lengthMin ||\r\n      data.value.length > data.lengthMax\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'number') {\r\n    if (data.value === 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  if (typeof data.value === 'object') {\r\n    let x: number = 0;\r\n    let res: boolean = false;\r\n    data.value.map((item) => {\r\n      if (\r\n        item.value.length >= data.lengthMin &&\r\n        item.value.length < data.lengthMax\r\n      ) {\r\n        x++;\r\n      }\r\n    });\r\n    x === data.value.length ? (res = true) : (res = false);\r\n    return res;\r\n  }\r\n  return false;\r\n};\r\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["extendedApiSlice","globalApi","injectEndpoints","endpoints","build","getQuestionById","query","id","url","getQuestionByChat","chat","updateQuestion","mutation","question","method","body","addQuestion","deleteQuestion","countAvailableQuestion","providesTags","countPublishedQuestion","useGetQuestionByChatQuery","useGetQuestionByIdQuery","useAddQuestionMutation","useDeleteQuestionMutation","useUpdateQuestionMutation","useCountAvailableQuestionQuery","useCountPublishedQuestionQuery","QuestionListItem","window","Telegram","WebApp","isLoading","data","isSuccess","_jsxs","_Fragment","children","_jsx","Preloader","map","item","className","SimpleAccordionMain","description","SimpleAccordionText","String","dateadd","text","category","content","ButtonIcon","firstIcon","color","icon","func","inDevelopment","ButtonIconConfirm","textConfirm","QuestionList","role","questionAppSlice","createSlice","name","initialState","questionSlide","questionType","questionData","undefined","answer1","answer2","answer3","answer4","answerright","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswerOne","getQuestionAnswerTwo","getQuestionAnswerThree","getQuestionAnswerFour","getQuestionAnswerright","getQuestionDefault","actions","selectQuestionSlide","questionApp","selectQuestionType","selectQuestionText","selectQuestionCategory","selectQuestion","storeQuestion","configureStore","reducer","reducerPath","middleware","getDefaultMiddleware","concat","useQuestionDispatch","useDispatch","useQuestionSelector","useSelector","TextList","onSubmit","tg","questionText","dispatch","setText","useState","useEffect","confirm","b","handleText","setTimeout","showConfirm","txt","SimpleTextArea","label","rows","value","e","target","ValidateForm","lengthMin","lengthMax","validation","approval","MainButton","show","onEvent","hide","StepsForm","step","stepsCount","steps","i","push","status","CategoryList","questionCategory","useGetCategoryQuery","selectedCategory","setCategory","find","SimpleCategorySelect","cat","AnswersList","selectedAnswerRight","setAnswerRight","answer","setAnswer","handleAnswer","tname","tvalue","newAnswers","Object","assign","validLength","validationButton","console","log","hendelClick","SimpleInputAnswer","selected","funcChange","funcButton","NewQuesion","currentStepIndex","isLastStep","next","setCurrentStepIndex","isFirstStep","length","goTo","index","back","useNewQuestionForm","async","Page","HeaderBlock","MainBlock","QuestionsPage","slide","type","BackButton","GlobalHeader","SlidePage","App","Provider","store","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","createApi","refetchOnFocus","baseQuery","tagTypes","showAlert","openTelegramLink","validationLengthForm","x","res","f","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","d","h","call","defaultProps","$$typeof","props","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}