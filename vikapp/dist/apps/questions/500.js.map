{"version":3,"file":"500.js","mappings":"kNAsBA,MAeaA,GAAmBC,EAAAA,EAAAA,aAAY,CAC1CC,KAAM,cACNC,aAjBqC,CACrCC,eAAe,EACfC,aAAc,GACdC,kBAAcC,EACdC,YAAa,CACXC,KAAM,GACNC,SAAU,EACVC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,YAAa,IAOfC,SAAU,CACRC,kBAAmBA,CAACC,EAAOC,KACzBD,EAAMd,cAAgBe,EAAOC,OAAO,EAEtCC,aAAcA,CAACH,EAAOC,KACpBD,EAAMb,aAAec,EAAOC,OAAO,EAErCE,aAAcA,CAACJ,EAAOC,KACpBD,EAAMZ,aAAea,EAAOC,OAAO,EAErCG,gBAAiBA,CAACL,EAAOC,KACvBD,EAAMV,YAAYC,KAAOU,EAAOC,OAAO,EAEzCI,oBAAqBA,CAACN,EAAOC,KAC3BD,EAAMV,YAAYE,SAAWS,EAAOC,OAAO,EAE7CK,qBAAsBA,CAACP,EAAOC,KAC5BD,EAAMV,YAAYG,QAAUQ,EAAOC,OAAO,EAE5CM,qBAAsBA,CAACR,EAAOC,KAC5BD,EAAMV,YAAYI,QAAUO,EAAOC,OAAO,EAE5CO,uBAAwBA,CAACT,EAAOC,KAC9BD,EAAMV,YAAYK,QAAUM,EAAOC,OAAO,EAE5CQ,sBAAuBA,CAACV,EAAOC,KAC7BD,EAAMV,YAAYM,QAAUK,EAAOC,OAAO,EAE5CS,uBAAwBA,CAACX,EAAOC,KAC9BD,EAAMV,YAAYO,YAAcI,EAAOC,OAAO,EAEhDU,mBAAoBA,CAACZ,EAAOC,KAC1BD,EAAMV,YAAYC,KAAO,GACzBS,EAAMV,YAAYE,SAAW,EAC7BQ,EAAMV,YAAYG,QAAU,GAC5BO,EAAMV,YAAYI,QAAU,GAC5BM,EAAMV,YAAYK,QAAU,GAC5BK,EAAMV,YAAYM,QAAU,GAC5BI,EAAMV,YAAYO,YAAc,CAAC,MAK1B,kBACXE,EAAiB,aACjBI,EAAY,aACZC,EAAY,gBACZC,EAAe,oBACfC,EAAmB,qBACnBC,EAAoB,qBACpBC,EAAoB,uBACpBC,EAAsB,sBACtBC,EAAqB,uBACrBC,EAAsB,mBACtBC,GACE9B,EAAiB+B,QAyBrB,EAAe/B,EAAwB,QCnH1BgC,GAAgBC,EAAAA,EAAAA,gBAAe,CAC1CC,QAAS,CACP,CAACC,EAAAA,EAAUC,aAAcD,EAAAA,EAAUD,QACnCG,YAAarC,GAEfsC,WAAaC,GACXA,IAAuBC,OAAOL,EAAAA,EAAUG,cAM/BG,EAAsBA,KAAMC,EAAAA,EAAAA,eAC5BC,EAA+DC,EAAAA,W,uDChB5E,MAAMC,GAAqBC,EAAAA,EAAAA,KACzBC,EAAAA,EAAAA,GAAe,CAAEC,QAAS,0CAC1B,CAAEC,WAAY,IAGHd,GAAYe,EAAAA,EAAAA,IAAU,CACjCd,YAAa,SACbe,gBAAgB,EAChBC,UAAWP,EACXQ,SAAU,CACR,YACA,YACA,gBACA,WACA,8BACA,+BAEFC,UAAWA,KAAA,CAAS,I","sources":["webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/../../libs/api/src/global.api.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '@store/main';\r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '..';\r\n\r\nexport interface IAddQuestion {\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestion;\r\n}\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswerOne: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer1 = action.payload;\r\n    },\r\n    getQuestionAnswerTwo: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer2 = action.payload;\r\n    },\r\n    getQuestionAnswerThree: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer3 = action.payload;\r\n    },\r\n    getQuestionAnswerFour: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer4 = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answer1 = '';\r\n      state.addQuestion.answer2 = '';\r\n      state.addQuestion.answer3 = '';\r\n      state.addQuestion.answer4 = '';\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerOne = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer1;\r\nexport const selectQuestionAnswerTwo = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer2;\r\nexport const selectQuestionAnswerThree = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer3;\r\nexport const selectQuestionAnswerFour = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer4;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from './slices/questionApp.slice';\r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n"],"names":["questionAppSlice","createSlice","name","initialState","questionSlide","questionType","questionData","undefined","addQuestion","text","category","answer1","answer2","answer3","answer4","answerright","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswerOne","getQuestionAnswerTwo","getQuestionAnswerThree","getQuestionAnswerFour","getQuestionAnswerright","getQuestionDefault","actions","storeQuestion","configureStore","reducer","globalApi","reducerPath","questionApp","middleware","getDefaultMiddleware","concat","useQuestionDispatch","useDispatch","useQuestionSelector","useSelector","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","createApi","refetchOnFocus","baseQuery","tagTypes","endpoints"],"sourceRoot":""}