{"version":3,"file":"172.js","mappings":"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","sources":["webpack://questions/./src/app/components/QuestionListItem.tsx","webpack://questions/./src/app/components/QuestionList.tsx","webpack://questions/./src/app/components/QuestionsPage.tsx","webpack://questions/../../libs/api/src/global.api.ts","webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/../../libs/api/src/vik.api.ts","webpack://questions/./src/app/app.tsx","webpack://questions/./src/bootstrap.tsx","webpack://questions/../../node_modules/react-dom/client.js"],"sourcesContent":["import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { selectQuestionData } from '../store/slices/questionApp.slice';\r\nimport {\r\n  Preloader,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\nimport { useGetQuestionByChatQuery } from '@api/question';\r\n\r\ninterface QuestionListItemProps {\r\n  chat: number;\r\n}\r\n\r\nexport const QuestionListItem = ({ chat }: QuestionListItemProps) => {\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n          <li className=\"cursor-pointer\">\r\n            <SimpleAccordionMain\r\n              description={\r\n                <>\r\n                  <SimpleAccordionText\r\n                    children={<p>sg</p>}\r\n                  ></SimpleAccordionText>\r\n                </>\r\n              }\r\n              content={\r\n                <>\r\n                  <p>Удалить</p>\r\n                  <p>Модерировать</p>\r\n                  <p>Статистика</p>\r\n                </>\r\n              }\r\n            />\r\n          </li>\r\n    </>\r\n  );\r\n};\r\n","import { QuestionListItem } from './QuestionListItem';\r\n\r\nexport const QuestionList = () => {\r\n  const chat = 521884639;\r\n  return (\r\n    <ul\r\n      role=\"list\"\r\n      className=\"mt-4 divide-y divide-[var(--tg-theme-hint-color)]\"\r\n    >\r\n      <QuestionListItem chat={chat} />\r\n    </ul>\r\n  );\r\n};\r\n","import { MainBlock, Page } from '@components';\r\nimport { QuestionList } from './QuestionList';\r\n\r\nexport const QuestionsPage = () => {\r\n  return (\r\n    <>\r\n      <Page>\r\n        <MainBlock>\r\n          <QuestionList />\r\n        </MainBlock>\r\n      </Page>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '..';\r\n\r\nexport interface IAddQuestion {\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestion;\r\n}\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswerOne: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer1 = action.payload;\r\n    },\r\n    getQuestionAnswerTwo: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer2 = action.payload;\r\n    },\r\n    getQuestionAnswerThree: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer3 = action.payload;\r\n    },\r\n    getQuestionAnswerFour: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer4 = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answer1 = '';\r\n      state.addQuestion.answer2 = '';\r\n      state.addQuestion.answer3 = '';\r\n      state.addQuestion.answer4 = '';\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerOne = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer1;\r\nexport const selectQuestionAnswerTwo = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer2;\r\nexport const selectQuestionAnswerThree = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer3;\r\nexport const selectQuestionAnswerFour = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer4;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from './slices/questionApp.slice';\r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import { globalApi } from '@api/global';\r\nimport { IValidate } from '@models';\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    validate: build.query<IValidate, string>({\r\n      query: (initData: string) => ({\r\n        url: `chat/validateUser/${initData}`,\r\n      }),\r\n      providesTags: ['Validate'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useValidateQuery } = extendedApiSlice;\r\n","import React from 'react';\nimport QuestionsPage from './components/QuestionsPage';\nimport { QuestionList } from './components/QuestionList';\nimport { useQuestionDispatch, useQuestionSelector } from '@store/questions';\nimport {\n  selectQuestionSlide,\n  selectQuestionType,\n  showQuestionSlide,\n} from './store/slices/questionApp.slice';\nimport { useValidateQuery } from '@api/vik';\nimport { Preloader, SlidePage } from '@components';\n\nexport function App() {\n  const tg = window.Telegram.WebApp;\n  const dispatch = useQuestionDispatch();\n\n  const slide = useQuestionSelector(selectQuestionSlide);\n  const type = useQuestionSelector(selectQuestionType);\n\n  React.useEffect(() => {\n    tg.expand();\n    tg.ready();\n  }, []);\n\n  if (slide) {\n    tg.BackButton.show();\n    tg.onEvent('backButtonClicked', () => {\n      dispatch(showQuestionSlide(false));\n    });\n  }\n\n  if (!slide) {\n    tg.BackButton.hide();\n  }\n\n  const { data, isSuccess, isLoading } = useValidateQuery(tg.initData);\n  console.log(data);\n\n  return (\n    <>\n      {isLoading && <Preloader />}\n      {isSuccess && (\n        <>\n          <QuestionsPage />\n          <SlidePage slide={slide}>\n            <>\n              <p>sgssdg1</p>\n              <QuestionList />\n              <p>sgssdg1</p>\n            </>\n          </SlidePage>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport * as ReactDOM from 'react-dom/client';\n\nimport App from './app/app';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["QuestionListItem","chat","_jsx","_Fragment","children","className","SimpleAccordionMain","description","SimpleAccordionText","content","_jsxs","QuestionList","role","QuestionsPage","Page","MainBlock","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","globalApi","createApi","reducerPath","refetchOnFocus","baseQuery","tagTypes","endpoints","questionAppSlice","createSlice","name","initialState","questionSlide","questionType","questionData","undefined","addQuestion","text","category","answer1","answer2","answer3","answer4","answerright","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswerOne","getQuestionAnswerTwo","getQuestionAnswerThree","getQuestionAnswerFour","getQuestionAnswerright","getQuestionDefault","actions","selectQuestionSlide","questionApp","selectQuestionType","useQuestionSelector","configureStore","reducer","middleware","getDefaultMiddleware","concat","useSelector","extendedApiSlice","injectEndpoints","build","validate","query","initData","url","providesTags","useValidateQuery","tg","window","Telegram","WebApp","dispatch","useDispatch","slide","React","expand","ready","BackButton","show","onEvent","hide","data","isSuccess","isLoading","console","log","Preloader","SlidePage","ReactDOM","document","getElementById","render","StrictMode","App","m","exports","createRoot","hydrateRoot"],"sourceRoot":""}