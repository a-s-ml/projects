{"version":3,"file":"840.js","mappings":"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","sources":["webpack://questions/../../libs/api/src/global.api.ts","webpack://questions/../../libs/api/src/question.api.ts","webpack://questions/./src/app/components/QuestionListItem.tsx","webpack://questions/./src/app/components/QuestionList.tsx","webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/./src/app/components/QuestionsPage.tsx","webpack://questions/./src/app/app.tsx","webpack://questions/./src/bootstrap.tsx","webpack://questions/../../node_modules/react-dom/client.js"],"sourcesContent":["import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","import { IQuestion } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport interface IAddQuestion {\r\n  chat: bigint;\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getQuestionById: build.query<IQuestion, number>({\r\n      query: (id) => ({\r\n        url: `question/findById/${id}`,\r\n      }),\r\n    }),\r\n\r\n    getQuestionByChat: build.query<IQuestion[], number>({\r\n      query: (chat) => ({\r\n        url: `question/findByChatId/${chat}`,\r\n      }),\r\n    }),\r\n\r\n    updateQuestion: build.mutation<IQuestion, any>({\r\n      query: ({ id, question }) => ({\r\n        url: `/question/${id}`,\r\n        method: \"PATCH\",\r\n        body: { question },\r\n      }),\r\n    }),\r\n\r\n    addQuestion: build.mutation<IQuestion, IAddQuestion>({\r\n      query: (question) => ({ \r\n        url: `/question`,\r\n        method: \"POST\",\r\n        body: question,\r\n      }),\r\n    }),\r\n\r\n    deleteQuestion: build.mutation<number, number>({\r\n      query: (id) => ({\r\n        url: `/chat-category`,\r\n        method: \"DELETE\",\r\n        body: { id },\r\n      }),\r\n    }),\r\n\r\n    countAvailableQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countAvailableQuestionByChatId/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n    countPublishedQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countPublishedQuestion/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetQuestionByChatQuery,\r\n  useGetQuestionByIdQuery,\r\n  useAddQuestionMutation,\r\n  useDeleteQuestionMutation,\r\n  useUpdateQuestionMutation,\r\n  useCountAvailableQuestionQuery,\r\n  useCountPublishedQuestionQuery\r\n} = extendedApiSlice;\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { selectQuestionData } from '../store/slices/questionApp.slice';\r\nimport {\r\n  Preloader,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\nimport { useGetQuestionByChatQuery } from '@api/question';\r\n\r\ninterface QuestionListItemProps {\r\n  chat: number;\r\n}\r\n\r\nexport const QuestionListItem = ({ chat }: QuestionListItemProps) => {\r\n  const { isLoading, isError, data, isSuccess } =\r\n    useGetQuestionByChatQuery(chat);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      {isSuccess &&\r\n        data.map((item) => (\r\n          <li className=\"cursor-pointer\">\r\n            <SimpleAccordionMain\r\n              description={\r\n                <>\r\n                  <SimpleAccordionText\r\n                    children={<p>{item.text}</p>}\r\n                  ></SimpleAccordionText>\r\n                </>\r\n              }\r\n              content={\r\n                <>\r\n                  <p>Удалить</p>\r\n                  <p>Модерировать</p>\r\n                  <p>Статистика</p>\r\n                </>\r\n              }\r\n            />\r\n          </li>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n","import { QuestionListItem } from './QuestionListItem';\r\n\r\nexport const QuestionList = () => {\r\n  return (\r\n    <ul\r\n      role=\"list\"\r\n      className=\"mt-4 divide-y divide-[var(--tg-theme-hint-color)]\"\r\n    >\r\n      <QuestionListItem chat={521884639} />\r\n    </ul>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '..';\r\n\r\nexport interface IAddQuestion {\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestion;\r\n}\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswerOne: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer1 = action.payload;\r\n    },\r\n    getQuestionAnswerTwo: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer2 = action.payload;\r\n    },\r\n    getQuestionAnswerThree: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer3 = action.payload;\r\n    },\r\n    getQuestionAnswerFour: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer4 = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answer1 = '';\r\n      state.addQuestion.answer2 = '';\r\n      state.addQuestion.answer3 = '';\r\n      state.addQuestion.answer4 = '';\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerOne = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer1;\r\nexport const selectQuestionAnswerTwo = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer2;\r\nexport const selectQuestionAnswerThree = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer3;\r\nexport const selectQuestionAnswerFour = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer4;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from './slices/questionApp.slice';\r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import {\r\n  ButtonAdd,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n  SlidePage,\r\n} from '@components';\r\nimport { QuestionList } from './QuestionList';\r\nimport { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  selectQuestionSlide,\r\n  showQuestionSlide,\r\n} from '../store/slices/questionApp.slice';\r\n\r\nexport const QuestionsPage = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const slide = useQuestionSelector(selectQuestionSlide);\r\n\r\n  if (slide) {\r\n    tg.BackButton.show();\r\n    tg.onEvent('backButtonClicked', () => {\r\n      dispatch(showQuestionSlide(false));\r\n    });\r\n  }\r\n\r\n  const addQuestion = () => {\r\n    tg.openTelegramLink('https://t.me/ViktorinaOnlineBot?startgroup=add');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalHeader>\r\n        <ButtonAdd text={'Добавить вопрос'} size={5} func={addQuestion} />\r\n      </GlobalHeader>\r\n      <Page>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <QuestionList />\r\n          <button\r\n            className={'pt-4'}\r\n            onClick={() => dispatch(showQuestionSlide(true))}\r\n          >\r\n            Click\r\n          </button>\r\n        </MainBlock>\r\n      </Page>\r\n      <SlidePage slide={slide}>\r\n        <p>Question</p>\r\n      </SlidePage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","import { Provider } from 'react-redux';\nimport QuestionsPage from './components/QuestionsPage';\nimport {\n  storeQuestion,\n  useQuestionDispatch,\n  useQuestionSelector,\n} from '@store/questions';\nimport {\n  selectQuestionSlide,\n  showQuestionSlide,\n} from './store/slices/questionApp.slice';\nimport { SlidePage } from '@components';\n\nexport const App = () => {\n  return (\n    <>\n      <Provider store={storeQuestion}>\n        <QuestionsPage />\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n","import { StrictMode } from 'react';\nimport * as ReactDOM from 'react-dom/client';\n\nimport App from './app/app';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <StrictMode>\n      <App />\n    </StrictMode>\n);\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","globalApi","createApi","reducerPath","refetchOnFocus","baseQuery","tagTypes","endpoints","extendedApiSlice","injectEndpoints","build","getQuestionById","query","id","url","getQuestionByChat","chat","updateQuestion","mutation","question","method","body","addQuestion","deleteQuestion","countAvailableQuestion","providesTags","countPublishedQuestion","useGetQuestionByChatQuery","useGetQuestionByIdQuery","useAddQuestionMutation","useDeleteQuestionMutation","useUpdateQuestionMutation","useCountAvailableQuestionQuery","useCountPublishedQuestionQuery","QuestionListItem","isLoading","isError","data","isSuccess","_jsxs","_Fragment","children","_jsx","Preloader","map","item","className","SimpleAccordionMain","description","SimpleAccordionText","text","content","QuestionList","role","questionAppSlice","createSlice","name","initialState","questionSlide","questionType","questionData","undefined","category","answer1","answer2","answer3","answer4","answerright","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswerOne","getQuestionAnswerTwo","getQuestionAnswerThree","getQuestionAnswerFour","getQuestionAnswerright","getQuestionDefault","actions","selectQuestionSlide","questionApp","storeQuestion","configureStore","reducer","middleware","getDefaultMiddleware","concat","useQuestionSelector","useSelector","QuestionsPage","tg","window","Telegram","WebApp","dispatch","useDispatch","slide","BackButton","show","onEvent","GlobalHeader","ButtonAdd","size","func","openTelegramLink","Page","MainBlock","onClick","SlidePage","App","Provider","store","ReactDOM","document","getElementById","render","StrictMode","m","exports","createRoot","hydrateRoot"],"sourceRoot":""}