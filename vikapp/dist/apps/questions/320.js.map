{"version":3,"file":"320.js","mappings":"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","sources":["webpack://questions/../../libs/api/src/question.api.ts","webpack://questions/../../libs/utils/src/func.ts","webpack://questions/./src/app/components/QuestionListItem.tsx","webpack://questions/./src/app/components/QuestionList.tsx","webpack://questions/./src/app/store/slices/questionApp.slice.ts","webpack://questions/./src/app/store/index.ts","webpack://questions/./src/app/components/NewQuestion/TextListValidate.tsx","webpack://questions/./src/app/components/NewQuestion/TextList.tsx","webpack://questions/./src/app/components/NewQuestion/StepsForm.tsx","webpack://questions/./src/app/components/NewQuestion/CategoryList.tsx","webpack://questions/./src/app/components/NewQuestion/AnswersList.tsx","webpack://questions/./src/app/components/NewQuesion.tsx","webpack://questions/./src/app/hooks/useNewQuestionForm.ts","webpack://questions/./src/app/components/QuestionsPage.tsx","webpack://questions/./src/app/app.tsx","webpack://questions/../../libs/api/src/global.api.ts","webpack://questions/../../node_modules/@heroicons/react/24/outline/esm/CheckIcon.js","webpack://questions/../../node_modules/@heroicons/react/24/outline/esm/XMarkIcon.js","webpack://questions/../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://questions/../../node_modules/react/jsx-runtime.js"],"sourcesContent":["import { IQuestion } from \"@models\";\r\nimport { globalApi } from \"@api/global\";\r\n\r\nexport interface IAddQuestion {\r\n  chat: bigint;\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport const extendedApiSlice = globalApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getQuestionById: build.query<IQuestion, number>({\r\n      query: (id) => ({\r\n        url: `question/findById/${id}`,\r\n      }),\r\n    }),\r\n\r\n    getQuestionByChat: build.query<IQuestion[], number>({\r\n      query: (chat) => ({\r\n        url: `question/findByChatId/${chat}`,\r\n      }),\r\n    }),\r\n\r\n    updateQuestion: build.mutation<IQuestion, any>({\r\n      query: ({ id, question }) => ({\r\n        url: `/question/${id}`,\r\n        method: \"PATCH\",\r\n        body: { question },\r\n      }),\r\n    }),\r\n\r\n    addQuestion: build.mutation<IQuestion, IAddQuestion>({\r\n      query: (question) => ({ \r\n        url: `/question`,\r\n        method: \"POST\",\r\n        body: question,\r\n      }),\r\n    }),\r\n\r\n    deleteQuestion: build.mutation<number, number>({\r\n      query: (id) => ({\r\n        url: `/chat-category`,\r\n        method: \"DELETE\",\r\n        body: { id },\r\n      }),\r\n    }),\r\n\r\n    countAvailableQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countAvailableQuestionByChatId/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n    countPublishedQuestion: build.query<number, bigint>({\r\n      query: (id) => ({\r\n        url: `auto-post/countPublishedQuestion/${id}`,\r\n      }),\r\n      providesTags: [\"CountAvailableQuestionGroup\"],\r\n    }),\r\n\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetQuestionByChatQuery,\r\n  useGetQuestionByIdQuery,\r\n  useAddQuestionMutation,\r\n  useDeleteQuestionMutation,\r\n  useUpdateQuestionMutation,\r\n  useCountAvailableQuestionQuery,\r\n  useCountPublishedQuestionQuery\r\n} = extendedApiSlice;\r\n","const tg = window.Telegram.WebApp;\r\n\r\nexport const addGroup = () => {\r\n  tg.openTelegramLink('https://t.me/ViktorinaOnlineBot?startgroup=add');\r\n};\r\n\r\nexport const inDevelopment = () => {\r\n  tg.showAlert(\r\n    'Данная функция находится в разработке',\r\n    console.log('inDevelopment')\r\n  );\r\n};\r\n\r\nexport const deleteGroup = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n\r\nexport const deleteQuestion = (b: boolean) => {\r\n  if (b) return tg.openTelegramLink('https://t.me/more_details');\r\n  return;\r\n};\r\n","import {\r\n  ButtonIcon,\r\n  ButtonIconConfirm,\r\n  Preloader,\r\n  SimpleAccordionMain,\r\n  SimpleAccordionText,\r\n} from '@components';\r\nimport { useGetQuestionByChatQuery } from '@api/question';\r\nimport { deleteQuestion, inDevelopment } from '@utils';\r\n\r\ninterface QuestionListItemProps {\r\n  chat: number;\r\n}\r\n\r\nexport const QuestionListItem = ({ chat }: QuestionListItemProps) => {\r\n  const tg = window.Telegram.WebApp;\r\n  const { isLoading, data, isSuccess } =\r\n    useGetQuestionByChatQuery(chat);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Preloader />}\r\n      {isSuccess &&\r\n        data.map((item) => (\r\n          <li className=\"cursor-pointer\">\r\n            <SimpleAccordionMain\r\n              description={\r\n                <SimpleAccordionText>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Дата: {String(item.dateadd)}\r\n                  </span>\r\n                  <p>{item.text}</p>\r\n                  <span className=\"text-xs text-[var(--tg-theme-hint-color)]\">\r\n                    Категория: {item.category}\r\n                  </span>\r\n                </SimpleAccordionText>\r\n              }\r\n              content={\r\n                <>\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Модерировать'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'moderate'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Статистика'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'stat'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIcon\r\n                    firstIcon={true}\r\n                    text={'Отправить'}\r\n                    color={'[var(--tg-theme-accent-text-color)]'}\r\n                    icon={'send'}\r\n                    func={inDevelopment}\r\n                  />\r\n                  <ButtonIconConfirm\r\n                    firstIcon={true}\r\n                    text={'Удалить'}\r\n                    color={'red-500'}\r\n                    icon={'delete'}\r\n                    func={deleteQuestion}\r\n                    textConfirm={`Вы действительно хотите удалить вопрос №${\r\n                      isSuccess ? data[0].id : 'не success'\r\n                    }`}\r\n                  />\r\n                </>\r\n              }\r\n            />\r\n          </li>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n","import { QuestionListItem } from './QuestionListItem';\r\n\r\nexport const QuestionList = () => {\r\n  return (\r\n    <ul\r\n      role=\"list\"\r\n      className=\"divide-y divide-[var(--tg-theme-hint-color)]\"\r\n    >\r\n      <QuestionListItem chat={521884639} />\r\n    </ul>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { IValidate } from '@models';\r\nimport { QuestionRootState } from '..';\r\n\r\nexport interface IAddQuestion {\r\n  text: string;\r\n  category: number;\r\n  answer1: string;\r\n  answer2: string;\r\n  answer3: string;\r\n  answer4: string;\r\n  answerright: number;\r\n}\r\n\r\nexport interface questionAppState {\r\n  questionSlide: boolean;\r\n  questionType: string;\r\n  questionData: IValidate | undefined;\r\n  addQuestion: IAddQuestion;\r\n}\r\n\r\nconst initialState: questionAppState = {\r\n  questionSlide: false,\r\n  questionType: '',\r\n  questionData: undefined,\r\n  addQuestion: {\r\n    text: '',\r\n    category: 0,\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answerright: 0,\r\n  },\r\n};\r\n\r\nexport const questionAppSlice = createSlice({\r\n  name: 'questionApp',\r\n  initialState,\r\n  reducers: {\r\n    showQuestionSlide: (state, action: PayloadAction<boolean>) => {\r\n      state.questionSlide = action.payload;\r\n    },\r\n    typeQuestion: (state, action: PayloadAction<string>) => {\r\n      state.questionType = action.payload;\r\n    },\r\n    dataQuestion: (state, action: PayloadAction<IValidate>) => {\r\n      state.questionData = action.payload;\r\n    },\r\n    getQuestionText: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = action.payload;\r\n    },\r\n    getQuestionCategory: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.category = action.payload;\r\n    },\r\n    getQuestionAnswerOne: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer1 = action.payload;\r\n    },\r\n    getQuestionAnswerTwo: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer2 = action.payload;\r\n    },\r\n    getQuestionAnswerThree: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer3 = action.payload;\r\n    },\r\n    getQuestionAnswerFour: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.answer4 = action.payload;\r\n    },\r\n    getQuestionAnswerright: (state, action: PayloadAction<number>) => {\r\n      state.addQuestion.answerright = action.payload;\r\n    },\r\n    getQuestionDefault: (state, action: PayloadAction<string>) => {\r\n      state.addQuestion.text = '';\r\n      state.addQuestion.category = 0;\r\n      state.addQuestion.answer1 = '';\r\n      state.addQuestion.answer2 = '';\r\n      state.addQuestion.answer3 = '';\r\n      state.addQuestion.answer4 = '';\r\n      state.addQuestion.answerright = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n  dataQuestion,\r\n  getQuestionText,\r\n  getQuestionCategory,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerright,\r\n  getQuestionDefault,\r\n} = questionAppSlice.actions;\r\n\r\nexport const selectQuestionSlide = (state: QuestionRootState) =>\r\n  state.questionApp.questionSlide;\r\nexport const selectQuestionData = (state: QuestionRootState) =>\r\n  state.questionApp.questionData;\r\nexport const selectQuestionType = (state: QuestionRootState) =>\r\n  state.questionApp.questionType;\r\nexport const selectQuestionText = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.text;\r\nexport const selectQuestionCategory = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.category;\r\nexport const selectQuestionAnswerOne = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer1;\r\nexport const selectQuestionAnswerTwo = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer2;\r\nexport const selectQuestionAnswerThree = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer3;\r\nexport const selectQuestionAnswerFour = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answer4;\r\nexport const selectQuestionAnswerright = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion.answerright;\r\nexport const selectQuestion = (state: QuestionRootState) =>\r\n  state.questionApp.addQuestion;\r\n\r\nexport default questionAppSlice.reducer; \r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { globalApi } from '@api/global';\r\nimport questionAppSlice from './slices/questionApp.slice';\r\n\r\nexport const storeQuestion = configureStore({\r\n  reducer: {\r\n    [globalApi.reducerPath]: globalApi.reducer,\r\n    questionApp: questionAppSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(globalApi.middleware),\r\n});\r\n\r\nexport type QuestionDispatch = typeof storeQuestion.dispatch;\r\nexport type QuestionRootState = ReturnType<typeof storeQuestion.getState>;\r\n\r\nexport const useQuestionDispatch = () => useDispatch<QuestionDispatch>();\r\nexport const useQuestionSelector: TypedUseSelectorHook<QuestionRootState> = useSelector;\r\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\r\n\r\ninterface TextListValidateProps {\r\n  text: string;\r\n  onSubmit: () => void;\r\n}\r\n\r\nconst tg = window.Telegram.WebApp;\r\n\r\nexport function TextListValidate({ text, onSubmit }: TextListValidateProps) {\r\n  if (text.length > 10 && text.substring(text.length - 1) === \"?\") {\r\n    tg.MainButton.setText(\"Следующий шаг\");\r\n    tg.MainButton.show();\r\n    tg.onEvent(\"mainButtonClicked\", onSubmit);\r\n  } else {\r\n    tg.MainButton.hide();\r\n  }\r\n\r\n  return (\r\n    <div className=\"py-4\">\r\n      <div className=\"mt-1 flex items-center gap-x-1.5\">\r\n        {text.length >= 10 && (\r\n          <CheckIcon className=\"h-5 w-5 text-green-600\" aria-hidden=\"true\" />\r\n        )}\r\n        {text.length < 10 && (\r\n          <XMarkIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\r\n        )}\r\n        <span\r\n          className={`max-w-[80%] text-xs ${\r\n            text.length >= 10 ? \"text-green-600\" : \"text-red-500\"\r\n          }`}\r\n        >\r\n          Минимальная длина текста вопроса должна составлять не менее 10\r\n          символов\r\n        </span>\r\n      </div>\r\n      <div className=\"mt-1 flex items-center gap-x-1.5\">\r\n        {text.substring(text.length - 1) === \"?\" && (\r\n          <CheckIcon className=\"h-5 w-5 text-green-600\" aria-hidden=\"true\" />\r\n        )}\r\n        {text.substring(text.length - 1) != \"?\" && (\r\n          <XMarkIcon className=\"h-5 w-5 text-red-500\" aria-hidden=\"true\" />\r\n        )}\r\n        <span\r\n          className={`max-w-[80%] text-xs ${\r\n            text.substring(text.length - 1) === \"?\"\r\n              ? \"text-green-600\"\r\n              : \"text-red-500\"\r\n          }`}\r\n        >\r\n          Сформулируйте вопрос так, чтобы он заканчивался вопросительным знаком\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  getQuestionDefault,\r\n  getQuestionText,\r\n  selectQuestionText,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { TextListValidate } from './TextListValidate';\r\nimport { SimpleTextArea } from '@components';\r\n\r\ninterface TextListProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport function TextList({ onSubmit }: TextListProps) {\r\n  const tg = window.Telegram.WebApp;\r\n  const questionText = useQuestionSelector(selectQuestionText);\r\n  const dispatch = useQuestionDispatch();\r\n  const [text, setText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const confirm = (b: boolean) => {\r\n      if (b) return handleText(questionText);\r\n      return dispatch(getQuestionDefault(''));\r\n    };\r\n    setTimeout(() => {\r\n      if (questionText != '') {\r\n        tg.showConfirm(`Применить несохранённый черновик?`, confirm);\r\n      }\r\n    }, 1500);\r\n  }, []);\r\n\r\n  const handleText = (txt: string) => {\r\n    setText(txt);\r\n    dispatch(getQuestionText(txt));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        <SimpleTextArea\r\n          label={'Текст вопроса:'}\r\n          rows={5}\r\n          value={text}\r\n          func={(e) => handleText(e.target.value)}\r\n        />\r\n        <TextListValidate text={text} onSubmit={onSubmit} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","interface StepsFormProps {\r\n  step: number;\r\n  stepsCount: number;\r\n}\r\n\r\ninterface Steps {\r\n  id: number;\r\n  status: string;\r\n}\r\n\r\nexport default function StepsForm({ step, stepsCount }: StepsFormProps) {\r\n  let steps: Steps[] = [];\r\n\r\n  //хз\r\n  for (let i = 0; i < stepsCount; i++) {\r\n    steps.push({\r\n      id: i,\r\n      status: step > i ? \"complete\" : \"upcoming\",\r\n    });\r\n  }\r\n  //хз\r\n\r\n  return (\r\n    <nav className=\"flex items-center px-8 pt-8 pb-4 bg-[var(--tg-theme-bg-color)] space-x-3 justify-center\" aria-label=\"Progress\">\r\n      <p className=\"text-sm font-medium text-[var(--tg-theme-accent-text-color)]\">\r\n        Шаг {step} из {stepsCount}\r\n      </p>\r\n      <ol role=\"list\" className=\"ml-8 flex items-center space-x-5\">\r\n        {steps.map((step) => (\r\n          <li key={step.id}>\r\n            {step.status === \"complete\" ? (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"></span>\r\n            ) : step.status === \"current\" ? (\r\n              <span\r\n                className=\"relative flex items-center justify-center\"\r\n                aria-current=\"step\"\r\n              >\r\n                <span className=\"absolute flex h-5 w-5 p-px\" aria-hidden=\"true\">\r\n                  <span className=\"h-full w-full rounded-full bg-[var(--tg-theme-text-color)]\" />\r\n                </span>\r\n                <span\r\n                  className=\"relative block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-accent-text-color)]\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            ) : (\r\n              <span className=\"block h-2.5 w-2.5 rounded-full bg-[var(--tg-theme-text-color)]\"></span>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  getQuestionCategory,\r\n  selectQuestionCategory,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { useState } from 'react';\r\nimport { ICategory } from '@models';\r\nimport { useGetCategoryQuery } from '@api/category';\r\nimport { SimpleCategorySelect } from '@components';\r\n\r\ninterface CategoryListProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nconst tg = window.Telegram.WebApp;\r\n\r\nexport function CategoryList({ onSubmit }: CategoryListProps) {\r\n  const questionCategory = useQuestionSelector(selectQuestionCategory);\r\n  const { data, isSuccess } = useGetCategoryQuery('');\r\n  const dispatch = useQuestionDispatch();\r\n  const [selectedCategory, setCategory] = useState(\r\n    questionCategory != 0\r\n      ? data?.find((id) => id.id === questionCategory)\r\n      : { id: 0, name: ' ' }\r\n  );\r\n\r\n  const handleChange = (cat: ICategory) => {\r\n    setCategory(cat);\r\n    dispatch(getQuestionCategory(cat.id));\r\n    tg.MainButton.setText('Следующий шаг');\r\n    tg.MainButton.show();\r\n    tg.onEvent('mainButtonClicked', () => {\r\n      tg.MainButton.hide();\r\n      onSubmit;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"py-2\">\r\n      {isSuccess && (\r\n        <SimpleCategorySelect\r\n          value={selectedCategory ? selectedCategory : { id: 0, name: ' ' }}\r\n          func={handleChange}\r\n          data={data}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport { ChangeEvent, useState } from 'react';\r\nimport {\r\n  getQuestionAnswerFour,\r\n  getQuestionAnswerOne,\r\n  getQuestionAnswerThree,\r\n  getQuestionAnswerTwo,\r\n  getQuestionAnswerright,\r\n  selectQuestion,\r\n} from '../../store/slices/questionApp.slice';\r\nimport { CheckIcon, XMarkIcon } from '@heroicons/react/24/outline';\r\nimport { AnswersListValidate } from './AnswersListValidate';\r\nimport { SimpleInputAnswer } from '@components';\r\n\r\ninterface AnswersListProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport function AnswersList({ onSubmit }: AnswersListProps) {\r\n  const answers = [\r\n    { id: 1, text: 'Вариант ответа 1', name: 'Answer1', value: '' },\r\n    { id: 2, text: 'Вариант ответа 2', name: 'Answer2', value: '' },\r\n    { id: 3, text: 'Вариант ответа 3', name: 'Answer3', value: '' },\r\n    { id: 4, text: 'Вариант ответа 4', name: 'Answer4', value: '' },\r\n  ];\r\n  const question = useQuestionSelector(selectQuestion);\r\n  const [selectedAnswerRight, setAnswerRight] = useState(question.answerright);\r\n  const [answer, setAnswer] = useState(answers);\r\n  const dispatch = useQuestionDispatch();\r\n  console.log(answer);\r\n  const handleAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    setAnswer((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const hendelClick = (id: number) => {\r\n    setAnswerRight(id);\r\n    dispatch(getQuestionAnswerright(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"py-2\">\r\n        {answers.map((item) => (\r\n          <SimpleInputAnswer\r\n            id={item.id}\r\n            selected={selectedAnswerRight}\r\n            label={item.text}\r\n            value={item.value}\r\n            funcChange={handleAnswer}\r\n            funcButton={hendelClick}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  storeQuestion,\r\n  useQuestionDispatch,\r\n  useQuestionSelector,\r\n} from '@store/questions';\r\nimport {\r\n  getQuestionDefault,\r\n  selectQuestion,\r\n  showQuestionSlide,\r\n} from '../store/slices/questionApp.slice';\r\nimport { TextList } from './NewQuestion/TextList';\r\nimport StepsForm from './NewQuestion/StepsForm';\r\nimport { CategoryList } from './NewQuestion/CategoryList';\r\nimport { AnswersList } from './NewQuestion/AnswersList';\r\nimport { useNewQuestionForm } from '../hooks/useNewQuestionForm';\r\nimport { useAddQuestionMutation } from '@api/question';\r\nimport { HeaderBlock, MainBlock, Page } from '@components';\r\n\r\nexport const NewQuesion = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const user = 521884639;\r\n  const question = useQuestionSelector(selectQuestion);\r\n  console.log(useQuestionSelector(storeQuestion.getState));\r\n\r\n  async function onSubmit() {\r\n    if (!isLastStep) return next();\r\n    if (isLastStep) {\r\n      if (question.text != '') {\r\n        await addQuestion({\r\n          chat: user as unknown as bigint,\r\n          text: question.text,\r\n          category: question.category,\r\n          answer1: question.answer1,\r\n          answer2: question.answer2,\r\n          answer3: question.answer3,\r\n          answer4: question.answer4,\r\n          answerright: question.answerright,\r\n        });\r\n      }\r\n      dispatch(showQuestionSlide(false));\r\n      dispatch(getQuestionDefault(''));\r\n    }\r\n  }\r\n\r\n  const { steps, currentStepIndex, step, isLastStep, next } =\r\n    useNewQuestionForm([\r\n      <TextList onSubmit={onSubmit} />,\r\n      <CategoryList onSubmit={onSubmit} />,\r\n      <AnswersList onSubmit={onSubmit} />,\r\n    ]);\r\n\r\n  const [addQuestion, {}] = useAddQuestionMutation();\r\n  return (\r\n    <Page>\r\n      <HeaderBlock>\r\n        <StepsForm step={currentStepIndex + 1} stepsCount={steps.length} />\r\n      </HeaderBlock>\r\n      <MainBlock>{step}</MainBlock>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default NewQuesion;\r\n","import { ReactElement, useState } from \"react\"\r\n\r\nexport function useNewQuestionForm(steps: ReactElement[]) {\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0)\r\n\r\n  function next() {\r\n    setCurrentStepIndex(i => {\r\n      if (i >= steps.length - 1) return i\r\n      return i + 1\r\n    })\r\n  }\r\n\r\n  function back() {\r\n    setCurrentStepIndex(i => {\r\n      if (i <= 0) return i\r\n      return i - 1\r\n    })\r\n  }\r\n\r\n  function goTo(index: number) {\r\n    setCurrentStepIndex(index)\r\n  }\r\n\r\n  return {\r\n    currentStepIndex,\r\n    step: steps[currentStepIndex],\r\n    steps,\r\n    isFirstStep: currentStepIndex === 0,\r\n    isLastStep: currentStepIndex === steps.length - 1,\r\n    goTo,\r\n    next,\r\n    back,\r\n  }\r\n}","import {\r\n  ButtonIcon,\r\n  GlobalHeader,\r\n  MainBlock,\r\n  Page,\r\n  SlidePage,\r\n} from '@components';\r\nimport { QuestionList } from './QuestionList';\r\nimport { useQuestionDispatch, useQuestionSelector } from '@store/questions';\r\nimport {\r\n  selectQuestionSlide,\r\n  selectQuestionType,\r\n  showQuestionSlide,\r\n  typeQuestion,\r\n} from '../store/slices/questionApp.slice';\r\nimport NewQuesion from './NewQuesion';\r\n\r\nexport const QuestionsPage = () => {\r\n  const tg = window.Telegram.WebApp;\r\n  const dispatch = useQuestionDispatch();\r\n  const slide = useQuestionSelector(selectQuestionSlide);\r\n  const type = useQuestionSelector(selectQuestionType);\r\n\r\n  if (slide) {\r\n    tg.BackButton.show();\r\n    tg.onEvent('backButtonClicked', () => {\r\n      dispatch(showQuestionSlide(false));\r\n    });\r\n  }\r\n\r\n  const addQuestion = () => {\r\n    dispatch(typeQuestion('addQuestion'));\r\n    dispatch(showQuestionSlide(true));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalHeader>\r\n        <ButtonIcon\r\n          firstIcon={true}\r\n          text={'Добавить вопрос'}\r\n          color={'[var(--tg-theme-accent-text-color)]'}\r\n          icon={'add'}\r\n          func={addQuestion}\r\n        />\r\n      </GlobalHeader>\r\n      <Page>\r\n        <MainBlock>\r\n          <div className=\"text-center pt-9\"></div>\r\n          <QuestionList />\r\n        </MainBlock>\r\n      </Page>\r\n      <SlidePage slide={slide}>\r\n        {type == 'addQuestion' && <NewQuesion />}\r\n      </SlidePage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","import { Provider } from 'react-redux';\nimport QuestionsPage from './components/QuestionsPage';\nimport { storeQuestion } from '@store/questions';\n\nexport const App = () => {\n  return (\n    <>\n      <Provider store={storeQuestion}>\n        <QuestionsPage />\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\r\n\r\nconst staggeredBaseQuery = retry(\r\n  fetchBaseQuery({ baseUrl: 'https://api80q.ru/viktorinaonlinebot/' }),\r\n  { maxRetries: 5 }\r\n);\r\n\r\nexport const globalApi = createApi({\r\n  reducerPath: 'vikApi',\r\n  refetchOnFocus: true,\r\n  baseQuery: staggeredBaseQuery,\r\n  tagTypes: [\r\n    'TypeGroup',\r\n    'TimeGroup',\r\n    'CategoryGroup',\r\n    'Validate',\r\n    'CountAvailableQuestionGroup',\r\n    'CountPublishedQuestionGroup',\r\n  ],\r\n  endpoints: () => ({}),\r\n});\r\n","import * as React from \"react\";\nfunction CheckIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m4.5 12.75 6 6 9-13.5\"\n  }));\n}\nconst ForwardRef = React.forwardRef(CheckIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction XMarkIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M6 18 18 6M6 6l12 12\"\n  }));\n}\nconst ForwardRef = React.forwardRef(XMarkIcon);\nexport default ForwardRef;","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["extendedApiSlice","globalApi","injectEndpoints","endpoints","build","getQuestionById","query","id","url","getQuestionByChat","chat","updateQuestion","mutation","question","method","body","addQuestion","deleteQuestion","countAvailableQuestion","providesTags","countPublishedQuestion","useGetQuestionByChatQuery","useGetQuestionByIdQuery","useAddQuestionMutation","useDeleteQuestionMutation","useUpdateQuestionMutation","useCountAvailableQuestionQuery","useCountPublishedQuestionQuery","tg","window","Telegram","WebApp","inDevelopment","showAlert","console","log","b","openTelegramLink","QuestionListItem","isLoading","data","isSuccess","_jsxs","_Fragment","children","_jsx","Preloader","map","item","className","SimpleAccordionMain","description","SimpleAccordionText","String","dateadd","text","category","content","ButtonIcon","firstIcon","color","icon","func","ButtonIconConfirm","textConfirm","QuestionList","role","questionAppSlice","createSlice","name","initialState","questionSlide","questionType","questionData","undefined","answer1","answer2","answer3","answer4","answerright","reducers","showQuestionSlide","state","action","payload","typeQuestion","dataQuestion","getQuestionText","getQuestionCategory","getQuestionAnswerOne","getQuestionAnswerTwo","getQuestionAnswerThree","getQuestionAnswerFour","getQuestionAnswerright","getQuestionDefault","actions","selectQuestionSlide","questionApp","selectQuestionType","selectQuestionText","selectQuestionCategory","selectQuestion","storeQuestion","configureStore","reducer","reducerPath","middleware","getDefaultMiddleware","concat","useQuestionDispatch","useDispatch","useQuestionSelector","useSelector","TextListValidate","onSubmit","length","substring","MainButton","setText","show","onEvent","hide","CheckIcon","XMarkIcon","TextList","questionText","dispatch","useState","useEffect","confirm","handleText","setTimeout","showConfirm","txt","SimpleTextArea","label","rows","value","e","target","StepsForm","step","stepsCount","steps","i","push","status","CategoryList","questionCategory","useGetCategoryQuery","selectedCategory","setCategory","find","SimpleCategorySelect","cat","AnswersList","answers","selectedAnswerRight","setAnswerRight","answer","setAnswer","handleAnswer","prevData","Object","assign","hendelClick","SimpleInputAnswer","selected","funcChange","funcButton","NewQuesion","async","isLastStep","next","getState","currentStepIndex","setCurrentStepIndex","isFirstStep","goTo","index","back","useNewQuestionForm","Page","HeaderBlock","MainBlock","QuestionsPage","slide","type","BackButton","GlobalHeader","SlidePage","App","Provider","store","staggeredBaseQuery","retry","fetchBaseQuery","baseUrl","maxRetries","createApi","refetchOnFocus","baseQuery","tagTypes","title","titleId","props","svgRef","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","f","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","__self","__source","q","c","a","g","h","call","defaultProps","$$typeof","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}